<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Math Machine</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Comic+Sans+MS" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/renderers/CSS2DRenderer.js"></script>
    <script>
        MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                displayMath: [ ['$$', '$$'], ['\\[', '\\]'] ],
            },
            svg: {
                fontCache: 'global'
            }
        };
    </script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <style>
        body {
            font-family: 'Montserrat', sans-serif !important;
            font-weight: 400 !important;
            background-color: #f9fafb;
        }
        .message-box {
            position: fixed; top: 20px; left: 50%;
            transform: translateX(-50%);
            background-color: #ef4444; color: white;
            padding: 1rem 1.5rem; border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000; display: none;
            font-size: 1rem; font-weight: bold;
        }
        select {
            -webkit-appearance: none; -moz-appearance: none; appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 0.5rem center;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        #comparatorInputsContainer select.comparator-unit, #measurementType, #equivalency-rows-container select, #integer-ops-container select, #chartTypeLeft, #chartTypeRight {
             background-image: none !important;
             padding-right: 1rem !important;
        }
        .full-width-section { width: 100%; background-color: #f8fafc; padding: 1rem; border-radius: 0.5rem; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        .hidden { display: none !important; }
        .toggle-btn { width: 3.5rem; height: 2rem; border-radius: 9999px; padding: 0.25rem; transition: background-color 0.2s ease-in-out; cursor: pointer; }
        .toggle-dot { width: 1.5rem; height: 1.5rem; background-color: white; border-radius: 9999px; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); transition: transform 0.2s ease-in-out; }
        .toggle-on { background-image: linear-gradient(130deg, #2B6DFE, #00F2FF); }
        .toggle-off { background-color: #d1d5db; }
        .dot-on { transform: translateX(1.5rem); }
        .dimension-label { background-color: rgba(0, 0, 0, 0.7); color: white; padding: 4px 8px; border-radius: 5px; font-size: 1.1em; white-space: nowrap; pointer-events: none; font-weight: bold; }
        .dimension-label-2d { position: absolute; background-color: rgba(0, 0, 0, 0.7); color: white; padding: 3px 8px; border-radius: 4px; font-size: 1.1em; font-weight: bold; transform: translate(-50%, -50%); pointer-events: none; display: block; }
        .css2d-container { position: absolute !important; top: 0px !important; left: 0px !important; pointer-events: none !important; overflow: hidden; z-index: 2; }
        /* Layout-specific styles */
        .display-area { min-height: 400px; background-color: #dbeafe; border: 2px solid #e5e7eb; display: flex; flex-direction: column; justify-content: center; align-items: center; overflow: auto; position: relative; width: 100%; border-radius: 0.5rem; padding: 1rem; user-select: none; }
        .canvas-layout-wrapper { display: flex; flex-direction: column; gap: 1rem; width: 100%; flex-grow: 1; }
        .canvas-layout-inputs { width: 100%; background-color: #f8fafc; padding: 1rem; border-radius: 0.5rem; display: flex; flex-direction: column; gap: 0.5rem; transition: all 0.3s ease-in-out; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        .canvas-layout-canvas { width: 100%; height: auto; aspect-ratio: 16/10; background-color: white; border-radius: 0.5rem; overflow: hidden; border: 2px solid #e5e7eb; transition: width 0.3s ease-in-out; box-shadow: 0 2px 4px rgba(0,0,0,0.05); position: relative; }
        
        @media (min-width: 1024px) {
            .standard-layout.layout-side-by-side { flex-direction: row; }
            .canvas-layout-wrapper { flex-direction: row; }
            .canvas-layout-inputs { width: 33.333333%; }
            .canvas-layout-inputs.panel-hidden { width: 0; padding: 0; margin: 0; overflow: hidden; border: none; opacity: 0; }
            .canvas-layout-canvas { width: 66.666666%; height: 600px; }
            .canvas-layout-canvas.canvas-expanded { width: 100%; }
        }
        
        /* Cardinality Tool Styles */
        .emoji-item { position: absolute; cursor: pointer; user-select: none; transition: transform 0.1s ease-out; }
        .emoji-item.clicked { background-color: rgba(253, 224, 71, 0.6); border-radius: 50%; transform: scale(1.1); }
        
        /* Numeral Display Drawing Canvas */
        #numeralDrawingCanvas { position: absolute; top: 0; left: 0; cursor: none; z-index: 10; }
        #customCursor { position: absolute; width: 30px; height: 30px; border-radius: 50%; background-color: #22c55e; opacity: 0.5; pointer-events: none; transform: translate(-50%, -50%); display: none; z-index: 20; }
    
        /* Place Value Chart Styles */
        .place-value-col {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-end;
            padding: 0 0.5rem;
            min-height: 100px;
            text-align: center;
        }
        .place-value-label {
            margin-bottom: 0.5rem;
        }
        .place-value-digit {
            font-size: 4.5rem;
            font-weight: 700;
            border-bottom: 2px solid #6b7280;
            padding: 0 0.5rem;
            min-width: 50px;
            color: #111827;
        }
        .decimal-point-col {
            display: flex;
            align-items: flex-end;
            padding-bottom: 0.5rem;
        }
        
        /* Tally Chart Styles */
        .tally-marks {
            font-family: 'monospace';
            letter-spacing: 0.1em;
            color: #1e3a8a;
            font-size: 3rem; /* Increased size */
        }
        .tally-group {
            display: inline-block;
            position: relative;
            margin-right: 0.5rem;
            padding-right: 0.2rem;
        }
        .tally-slash {
            position: absolute;
            left: -0.2rem;
            top: 50%;
            width: 110%;
            height: 2px;
            background-color: #1e3a8a;
            transform: translateY(-50%) rotate(-15deg);
        }
    </style>
</head>
<body class="bg-gray-50 flex items-center justify-center p-4">
    <div class="w-full max-w-7xl mx-auto bg-white rounded-2xl p-6 flex flex-col gap-4 min-h-screen shadow-lg">
        <!-- Top controls row -->
        <div id="topControlsRow" class="flex flex-wrap items-center justify-between gap-4">
            <div id="menu-controls" class="flex flex-wrap items-center gap-4 justify-center md:justify-start">
                <select id="modeSelector" class="bg-slate-100 text-slate-800 font-bold py-2 px-4 text-sm md:text-base rounded-lg transition border-2 border-slate-200 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 outline-none">
                    <option value="cardinality" selected>1. Cardinality Counter</option>
                    <option value="verticalComparison">1b. Vertical Object Counter</option>
                    <option value="numeralDisplay">2. Numeral Display</option>
                    <option value="wordProblemVisualizer">3. Word Problem Visualizer</option>
                    <option value="measurementComparator">4. Measurement Comparison</option>
                    <option value="shapeClassifier">5. 2D/3D Shape Classifier</option>
                    <option value="tallyChart">7. Tally Chart</option>
                    <option value="placeValue">8. Place Value Tool</option>
                    <option value="equivalencyTool">9. Fraction/Decimal/Percent Equivalence</option>
                    <option value="unitRateCalculator">11. Unit Rate Calculator</option>
                    <option value="integerOperations">12. Integer Operations Visualizer</option>
                    <option value="dataSetAnalyzer">14. Data Set Analyzer</option>
                    <option value="volumeOfSphere">16. Sphere Volume</option>
                    <option value="surfaceAreaOfSphere">16b. Sphere Surface Area</option>
                </select>
                <div id="dimensionInputsInline" class="flex flex-wrap justify-center lg:justify-start items-center gap-x-4 gap-y-2"></div>
            </div>
            <div class="flex items-center gap-6 ml-auto">
                <div class="flex items-center gap-2">
                    <span class="text-sm font-semibold">Menu</span>
                    <button id="menu-toggle-btn" class="toggle-btn toggle-on">
                        <div id="menu-toggle-dot" class="toggle-dot dot-on"></div>
                    </button>
                </div>
                <div id="answer-toggle-container" class="flex items-center gap-2">
                    <span class="text-sm font-semibold">Answer</span>
                    <button id="answer-toggle-btn" class="toggle-btn toggle-on">
                        <div id="answer-toggle-dot" class="toggle-dot dot-on"></div>
                    </button>
                </div>
            </div>
        </div>
        <!-- Layout for Standard Tools -->
        <div id="standardLayout" class="flex flex-1 flex-col lg:flex-row gap-4 hidden">
            <div id="standardDisplayArea" class="display-area">
                <canvas id="canvas3DGlobal" class="hidden w-full h-full"></canvas>
                <div id="htmlDisplay" class="w-full h-full flex items-center justify-center gap-4"></div>
            </div>
            <div id="calculationStepsColumn" class="flex-1 mt-4 lg:mt-0">
                <div class="full-width-section h-full flex flex-col">
                    <h3 id="stepsContentTitle" class="text-lg font-bold text-slate-800 mb-2">Result / Steps:</h3>
                    <div id="stepsContentContainer" class="bg-slate-50 p-4 rounded-lg border border-slate-200 flex-grow overflow-y-auto flex items-center justify-center font-serif"></div>
                </div>
            </div>
        </div>
        <!-- Layout for Interactive Canvas Tools -->
        <div id="canvasLayout" class="hidden flex-grow">
            <div class="canvas-layout-wrapper">
                <div id="canvasInputsPanel" class="canvas-layout-inputs"></div>
                <div class="canvas-layout-canvas">
                    <canvas id="mainCanvas" class="w-full h-full"></canvas>
                    <div id="zoomControls" class="absolute top-4 right-4 flex flex-col gap-2 z-10 hidden">
                        <button id="zoomInButton" class="bg-indigo-600 text-white font-semibold py-1 px-3 rounded-md shadow-md text-xl h-8 w-8 flex items-center justify-center">+</button>
                        <button id="zoomOutButton" class="bg-indigo-600 text-white font-semibold py-1 px-3 rounded-md shadow-md text-xl h-8 w-8 flex items-center justify-center">-</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Layout for Interactive Manipulative-style Tools -->
        <div id="interactiveLayout" class="hidden w-full flex flex-col flex-grow gap-4">
            <div id="interactiveDisplay" class="display-area flex-grow"></div>
            <div id="interactiveResult" class="full-width-section hidden">
                <h3 id="interactiveResultTitle" class="text-lg font-bold text-slate-800 mb-2">Result:</h3>
                <div id="interactiveResultContent" class="bg-slate-50 p-4 rounded-lg border border-slate-200 min-h-[60px] overflow-x-auto flex flex-col justify-center items-center font-serif"></div>
            </div>
        </div>
        
        <div id="messageBox" class="message-box"></div>
    </div>
<script>
// --- GLOBAL DOM ELEMENTS & STATE ---
const modeSelector = document.getElementById('modeSelector');
const messageBox = document.getElementById('messageBox');
const standardLayout = document.getElementById('standardLayout');
const canvasLayout = document.getElementById('canvasLayout');
const interactiveLayout = document.getElementById('interactiveLayout');
const dimensionInputsInline = document.getElementById('dimensionInputsInline');
const canvasInputsPanel = document.getElementById('canvasInputsPanel');
const standardDisplayArea = document.getElementById('standardDisplayArea');
const htmlDisplay = document.getElementById('htmlDisplay');
const canvas3DGlobal = document.getElementById('canvas3DGlobal'); // Changed name for clarity
const interactiveDisplay = document.getElementById('interactiveDisplay');
const mainCanvas = document.getElementById('mainCanvas');
const mainCtx = mainCanvas.getContext('2d');
const calculationStepsColumn = document.getElementById('calculationStepsColumn');
const stepsContentTitle = document.getElementById('stepsContentTitle');
const stepsContentContainer = document.getElementById('stepsContentContainer');
const interactiveResult = document.getElementById('interactiveResult');
const interactiveResultTitle = document.getElementById('interactiveResultTitle');
const interactiveResultContent = document.getElementById('interactiveResultContent');
const menuToggleBtn = document.getElementById('menu-toggle-btn');
const menuToggleDot = document.getElementById('menu-toggle-dot');
const menuControls = document.getElementById('menu-controls');
const answerToggleBtn = document.getElementById('answer-toggle-btn');
const answerToggleDot = document.getElementById('answer-toggle-dot');
const answerToggleContainer = document.getElementById('answer-toggle-container');
const zoomControls = document.getElementById('zoomControls');
const zoomInButton = document.getElementById('zoomInButton');
const zoomOutButton = document.getElementById('zoomOutButton');
// State Variables
let currentMode = 'cardinality';
let scene, camera, renderer, object3D, controls, labelRenderer, animationFrameId;
let cardinalityCounter = 0;
let verticalComparisonState = { leftItems: [], rightItems: [], leftCount: 0, rightCount: 0, canvas: null, ctx: null };
let numeralDisplayState = { canvas: null, ctx: null, cursor: null, drawing: false, paths: [], currentPath: [] };
let measurementComparatorState = { mode: 'teach' };
let shapeClassifierState = { mode: 'teach' };
let equivalencyToolState = { showLabels: true, showCircles: true };
let integerOperationsState = { currentStep: 0, story: [] };
let dataSetAnalyzerState = { showEquation: true, showGraph: true };
let activeListeners = [];
// --- CATEGORIZATION OF TOOLS ---
const STANDARD_LAYOUT_TOOLS = ['numeralDisplay', 'wordProblemVisualizer', 'shapeClassifier', 'volumeOfSphere', 'surfaceAreaOfSphere'];
const CANVAS_LAYOUT_TOOLS = [];
const INTERACTIVE_LAYOUT_TOOLS = ['cardinality', 'verticalComparison', 'measurementComparator', 'tallyChart', 'placeValue', 'equivalencyTool', 'unitRateCalculator', 'integerOperations', 'dataSetAnalyzer'];
// --- INPUT TEMPLATES ---
const inputTemplates = {
    cardinality: `
        <div class="flex items-center gap-2"><label class="text-sm font-semibold">Emoji:</label><select id="emojiSelect" class="bg-slate-100 p-1 rounded-md border border-slate-200">
            <option>🍎</option><option>⭐</option><option>⚽️</option><option>🚗</option><option>❤️</option>
        </select></div>
        <div class="flex items-center gap-2"><label class="text-sm font-semibold">Count:</label><input type="number" id="emojiCount" value="5" min="1" max="50" class="w-16 p-1 border-2 rounded-lg text-center"></div>
        <div class="flex items-center gap-2"><input type="checkbox" id="scatterCheck" class="h-4 w-4 rounded"><label for="scatterCheck" class="text-sm font-semibold">Scatter</label></div>
    `,
    verticalComparison: `
        <div class="flex flex-col gap-4 lg:flex-row">
            <div class="p-2 border rounded-lg flex flex-wrap gap-x-4 gap-y-2 items-center">
                <span class="font-bold text-green-700">Left Set (Nature):</span>
                <div class="flex items-center gap-2"><label class="text-sm">Object:</label><select id="emojiSelect1" class="bg-slate-100 p-1 rounded-md border border-slate-200"><option>🌳</option><option>🍁</option><option>🌻</option></select></div>
                <div class="flex items-center gap-2"><label class="text-sm">Count:</label><input type="number" id="emojiCount1" value="7" min="1" max="50" class="w-16 p-1 border-2 rounded-lg text-center"></div>
                <div class="flex items-center gap-2"><input type="checkbox" id="scatterCheck1" class="h-4 w-4 rounded" checked><label for="scatterCheck1" class="text-sm">Scatter</label></div>
            </div>
            <div class="p-2 border rounded-lg flex flex-wrap gap-x-4 gap-y-2 items-center">
                <span class="font-bold text-blue-700">Right Set (Space):</span>
                <div class="flex items-center gap-2"><label class="text-sm">Object:</label><select id="emojiSelect2" class="bg-slate-100 p-1 rounded-md border border-slate-200"><option>🚀</option><option>🪐</option><option>🌟</option></select></div>
                <div class="flex items-center gap-2"><label class="text-sm">Count:</label><input type="number" id="emojiCount2" value="5" min="1" max="50" class="w-16 p-1 border-2 rounded-lg text-center"></div>
                <div class="flex items-center gap-2"><input type="checkbox" id="scatterCheck2" class="h-4 w-4 rounded" checked><label for="scatterCheck2" class-sm">Scatter</label></div>
            </div>
        </div>
    `,
    numeralDisplay: `
        <div class="flex items-center gap-2"><label class="text-sm font-semibold">Number:</label><input type="number" id="numeralInput" value="7" class="w-24 p-1 border-2 rounded-lg text-center"></div>
        <button id="undoBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold p-1 rounded-full w-8 h-8 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/></svg>
        </button>
        <button id="clearBtn" class="bg-red-500 text-white font-bold py-1 px-3 rounded-lg text-sm">Clear</button>
    `,
    wordProblemVisualizer: `
        <div class="flex flex-col gap-2 w-full"><label class="text-sm font-semibold">Word Problem:</label>
        <textarea id="wordProblemText" class="w-full p-2 border-2 rounded-lg" rows="4">Sarah has 3 boxes of crayons. Each box has 12 crayons. How many crayons does Sarah have in total?</textarea></div>
    `,
    measurementComparator: `
        <div class="flex flex-col gap-4 w-full">
            <div class="flex items-center gap-4 flex-wrap">
                <label for="measurementType" class="text-sm font-semibold">Type:</label>
                <select id="measurementType" class="bg-slate-100 p-1 rounded-md border border-slate-200"></select>
                <button id="teachQuestionToggle" class="bg-indigo-600 text-white font-semibold py-1 px-3 rounded-lg text-sm ml-auto">Mode: Teach</button>
            </div>
            <div id="comparatorInputsContainer" class="flex flex-col gap-2"></div>
            <button id="addComparatorItem" class="bg-blue-500 text-white font-semibold py-1 px-3 rounded-lg text-sm self-start">+ Add Measurement</button>
        </div>
    `,
    shapeClassifier: `
        <div class="flex items-center gap-4 w-full flex-wrap">
            <label for="shapeSelect" class="text-sm font-semibold">Shape:</label>
            <select id="shapeSelect" class="flex-grow bg-slate-100 p-2 rounded-md border border-slate-200"></select>
            <button id="shapeClassifierToggle" class="bg-indigo-600 text-white font-semibold py-1 px-3 rounded-lg text-sm">Mode: Teach</button>
        </div>
    `,
    tallyChart: `
        <div class="flex flex-col gap-2 w-full">
            <div id="tally-rows-container" class="flex flex-col gap-2"></div>
            <button id="add-tally-row" class="bg-blue-500 text-white font-semibold py-1 px-3 rounded-lg text-sm self-start mt-2">+ Add Row</button>
        </div>`,
    placeValue: `<div class="flex items-center gap-2"><label class="text-sm font-semibold">Number:</label><input type="text" id="placeValueNumber" value="482.15" class="w-48 p-1 border-2 rounded-lg text-center"></div>`,
    equivalencyTool: `
        <div class="flex flex-col gap-4 w-full">
            <div class="flex items-center justify-between">
                 <div class="flex items-center gap-4">
                     <div class="flex items-center gap-2">
                        <span class="text-sm font-semibold">Circles</span>
                        <button id="equivalency-circle-toggle-btn" class="toggle-btn toggle-on">
                            <div class="toggle-dot dot-on"></div>
                        </button>
                    </div>
                    <div class="flex items-center gap-2">
                        <span class="text-sm font-semibold">Labels</span>
                        <button id="equivalency-label-toggle-btn" class="toggle-btn toggle-on">
                            <div class="toggle-dot dot-on"></div>
                        </button>
                    </div>
                </div>
            </div>
            <div id="equivalency-rows-container" class="flex flex-col gap-2"></div>
            <button id="add-equivalency-row" class="bg-blue-500 text-white font-semibold py-1 px-3 rounded-lg text-sm self-start mt-2">+ Add Item</button>
        </div>`,
    unitRateCalculator: `
        <div class="flex flex-col gap-2 w-full">
            <div id="unitrate-rows-container" class="flex flex-col gap-2"></div>
            <button id="add-unitrate-row" class="bg-blue-500 text-white font-semibold py-1 px-3 rounded-lg text-sm self-start mt-2">+ Add Item</button>
        </div>`,
    integerOperations: `
        <div class="flex flex-col gap-2 w-full">
             <div class="flex items-center gap-4">
                <div class="flex items-center gap-2">
                    <label class="text-sm font-semibold">Start Number:</label>
                    <input type="number" id="integerStart" value="0" class="w-24 p-1 border-2 rounded-lg text-center">
                </div>
                <div class="flex items-center gap-2 ml-auto">
                    <button id="integer-op-prev" class="bg-gray-300 hover:bg-gray-400 font-bold py-1 px-3 rounded-lg text-sm disabled:opacity-50 disabled:cursor-not-allowed">Prev</button>
                    <button id="integer-op-next" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-3 rounded-lg text-sm disabled:opacity-50 disabled:cursor-not-allowed">Next</button>
                    <button id="integer-op-reset" class="bg-red-500 text-white font-bold py-1 px-3 rounded-lg text-sm">Reset</button>
                </div>
            </div>
            <div id="integer-ops-container" class="flex flex-col gap-2 mt-2"></div>
            <button id="add-integer-op-row" class="bg-blue-500 text-white font-semibold py-1 px-3 rounded-lg text-sm self-start mt-2">+ Add Operation</button>
        </div>`,
    dataSetAnalyzer: `
        <div class="flex flex-col gap-2 w-full">
            <label class="text-sm font-semibold">Data (comma-separated):</label>
            <input type="text" id="dataSetInput" value="5, 8, 12, 5, 9, 11, 8, 15" class="w-full p-2 border-2 rounded-lg">
            <div id="dataSetCalcTypeContainer" class="flex flex-wrap gap-x-4 gap-y-2 mt-2">
                <label><input type="radio" name="calcType" value="mean" checked> Mean</label>
                <label><input type="radio" name="calcType" value="median"> Median</label>
                <label><input type="radio" name="calcType" value="mode"> Mode</label>
                <label><input type="radio" name="calcType" value="range"> Range</label>
                <label><input type="radio" name="calcType" value="mad"> MAD</label>
            </div>
        </div>
    `,
    volumeOfSphere: `<div class="flex items-center gap-2"><label class="text-sm font-semibold">Radius (r):</label><input type="number" id="sphereRadius" value="5" min="0.1" step="0.1" class="w-20 p-1 border-2 rounded-lg text-center"></div>`,
    surfaceAreaOfSphere: `<div class="flex items-center gap-2"><label class="text-sm font-semibold">Radius (r):</label><input type="number" id="sphereRadius" value="5" min="0.1" step="0.1" class="w-20 p-1 border-2 rounded-lg text-center"></div>`
};
// --- HELPER & CLEANUP FUNCTIONS ---
function showMessage(message, duration = 3000) {
    messageBox.textContent = message;
    messageBox.style.display = 'block';
    setTimeout(() => { messageBox.style.display = 'none'; }, duration);
}
function cleanupEventListeners() {
    activeListeners.forEach(({ target, type, handler }) => {
        target.removeEventListener(type, handler);
    });
    activeListeners = [];
}
function addManagedListener(target, type, handler) {
    target.addEventListener(type, handler);
    activeListeners.push({ target, type, handler });
}
function cleanupThreeScene() {
    if (animationFrameId) cancelAnimationFrame(animationFrameId);
    if (scene) {
        scene.traverse(object => {
            if (object.geometry) object.geometry.dispose();
            if (object.material) {
                if (Array.isArray(object.material)) {
                    object.material.forEach(material => material.dispose());
                } else {
                    object.material.dispose();
                }
            }
        });
        scene.clear();
    }
    if (renderer) renderer.dispose();
    if (labelRenderer && labelRenderer.domElement.parentNode) {
        labelRenderer.domElement.parentNode.removeChild(labelRenderer.domElement);
        labelRenderer = null;
    }
    canvas3DGlobal.classList.add('hidden');
}
function resetDisplayAreas() {
    cleanupThreeScene(); 
    htmlDisplay.innerHTML = '';
    htmlDisplay.className = 'w-full h-full flex items-center justify-center gap-4';
    interactiveDisplay.innerHTML = '';
    interactiveResultContent.innerHTML = '';
    standardDisplayArea.className = 'display-area';
}
// --- TOOL-SPECIFIC FUNCTIONS ---
// Tool: Cardinality Counter
function setupCardinality() {
    addManagedListener(interactiveDisplay, 'click', handleCardinalityClick);
}
function drawCardinality() {
    cardinalityCounter = 0;
    interactiveResultTitle.textContent = "Count:";
    interactiveResultContent.innerHTML = `<div class="text-3xl md:text-4xl lg:text-5xl">$$0$$</div>`;
    
    const emoji = document.getElementById('emojiSelect').value;
    const count = parseInt(document.getElementById('emojiCount').value);
    const scatter = document.getElementById('scatterCheck').checked;
    
    const container = interactiveDisplay;
    container.innerHTML = '';
    const padding = 30;
    const w = container.clientWidth - padding * 2;
    const h = container.clientHeight - padding * 2;
    const size = Math.max(20, Math.min(60, w / Math.sqrt(count * 2.5)));
    for (let i = 0; i < count; i++) {
        const el = document.createElement('div');
        el.className = 'emoji-item';
        el.textContent = emoji;
        el.style.fontSize = `${size}px`;
        
        let x, y;
        if (scatter) {
            x = Math.random() * (w - size) + padding;
            y = Math.random() * (h - size) + padding;
        } else {
            const itemsPerRow = Math.floor(w / (size * 1.2));
            const row = Math.floor(i / itemsPerRow);
            const col = i % itemsPerRow;
            x = padding + col * (size * 1.2);
            y = padding + row * (size * 1.2);
        }
        el.style.left = `${x}px`;
        el.style.top = `${y}px`;
        container.appendChild(el);
    }
}
function handleCardinalityClick(event) {
    const target = event.target;
    if (target.classList.contains('emoji-item') && !target.classList.contains('clicked')) {
        target.classList.add('clicked');
        cardinalityCounter++;
        interactiveResultContent.innerHTML = `<div class="text-3xl md:text-4xl lg:text-5xl">$$${cardinalityCounter}$$</div>`;
        if (window.MathJax) MathJax.typesetPromise([interactiveResultContent]);
    }
}
// Tool: Vertical Object Counter
function setupVerticalComparison() {
    addManagedListener(interactiveDisplay, 'click', handleVerticalComparisonClick);
    
    addManagedListener(interactiveDisplay, 'mousemove', (event) => {
        const { canvas, leftItems, rightItems } = verticalComparisonState;
        if (!canvas) return;
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        const checkHit = (item) => (x >= item.x && x <= item.x + item.size && y >= item.y && y <= item.y + item.size);
        const allItems = [...leftItems, ...rightItems];
        const isHoveringClickable = allItems.some(item => !item.clicked && checkHit(item));
        
        canvas.style.cursor = isHoveringClickable ? 'pointer' : 'default';
    });
}
function drawVerticalComparison() {
    verticalComparisonState = { leftItems: [], rightItems: [], leftCount: 0, rightCount: 0, canvas: null, ctx: null };
    interactiveResultTitle.textContent = "Comparison Counts:";
    interactiveResultContent.innerHTML = `<div class="text-3xl md:text-4xl lg:text-5xl" id="verticalComparisonResult">$$ \\text{Nature: } 0 \\quad \\text{Space: } 0 $$</div>`;
    interactiveDisplay.innerHTML = '';
    const canvas = document.createElement('canvas');
    canvas.width = interactiveDisplay.clientWidth;
    canvas.height = interactiveDisplay.clientHeight;
    interactiveDisplay.appendChild(canvas);
    verticalComparisonState.canvas = canvas;
    verticalComparisonState.ctx = canvas.getContext('2d');
    const midX = canvas.width / 2;
    const count1 = parseInt(document.getElementById('emojiCount1').value);
    const emoji1 = document.getElementById('emojiSelect1').value;
    const scatter1 = document.getElementById('scatterCheck1').checked;
    verticalComparisonState.leftItems = generateCanvasItems(count1, emoji1, scatter1, { x: 0, y: 0, w: midX, h: canvas.height });
    const count2 = parseInt(document.getElementById('emojiCount2').value);
    const emoji2 = document.getElementById('emojiSelect2').value;
    const scatter2 = document.getElementById('scatterCheck2').checked;
    verticalComparisonState.rightItems = generateCanvasItems(count2, emoji2, scatter2, { x: midX, y: 0, w: midX, h: canvas.height });
    redrawComparisonCanvas();
}
function generateCanvasItems(count, emoji, scatter, bounds) {
    const items = [];
    const paddingX = 30;
    const paddingY = 10;
    const w = bounds.w - paddingX * 2;
    const h = bounds.h - paddingY * 2;
    const size = Math.max(20, Math.min(50, w / Math.sqrt(count * 2.5)));
    for (let i = 0; i < count; i++) {
        let x, y;
        if (scatter) {
            x = Math.random() * (w - size) + paddingX + bounds.x;
            y = Math.random() * (h - size) + paddingY + bounds.y;
        } else {
            const itemsPerRow = Math.floor(w / (size * 1.2));
            const row = Math.floor(i / itemsPerRow);
            const col = i % itemsPerRow;
            x = paddingX + col * (size * 1.2) + bounds.x;
            y = paddingY + row * (size * 1.2) + bounds.y;
        }
        items.push({ x, y, size, emoji, clicked: false });
    }
    return items;
}
function redrawComparisonCanvas() {
    const { canvas, ctx, leftItems, rightItems } = verticalComparisonState;
    if (!ctx) return;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    const midX = canvas.width / 2;
    ctx.fillStyle = '#dbeafe';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.strokeStyle = '#94a3b8'; // slate-400
    ctx.lineWidth = 2;
    ctx.setLineDash([5, 5]);
    ctx.beginPath();
    ctx.moveTo(midX, 0);
    ctx.lineTo(midX, canvas.height);
    ctx.stroke();
    ctx.setLineDash([]);
    const drawItems = (items) => {
        items.forEach(item => {
            ctx.font = `${item.size}px Montserrat`;
            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            if (item.clicked) {
                ctx.fillStyle = 'rgba(253, 224, 71, 0.6)';
                ctx.beginPath();
                ctx.arc(item.x + item.size / 2, item.y + item.size / 2, item.size * 0.6, 0, 2 * Math.PI);
                ctx.fill();
            }
            ctx.fillStyle = '#000000';
            ctx.fillText(item.emoji, item.x, item.y);
        });
    };
    drawItems(leftItems);
    drawItems(rightItems);
}
function handleVerticalComparisonClick(event) {
    const { canvas, leftItems, rightItems } = verticalComparisonState;
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    const midX = canvas.width / 2;
    const checkHit = (item) => (x >= item.x && x <= item.x + item.size && y >= item.y && y <= item.y + item.size);
    const itemsToCheck = (x < midX) ? leftItems : rightItems;
    const clickedItem = itemsToCheck.find(item => !item.clicked && checkHit(item));
    if (clickedItem) {
        clickedItem.clicked = true;
        if (x < midX) {
            verticalComparisonState.leftCount++;
        } else {
            verticalComparisonState.rightCount++;
        }
        const resultDiv = document.getElementById('verticalComparisonResult');
        if (resultDiv) {
            resultDiv.innerHTML = `$$ \\text{Nature: } ${verticalComparisonState.leftCount} \\quad \\text{Space: } ${verticalComparisonState.rightCount} $$`;
            if (window.MathJax) MathJax.typesetPromise([resultDiv]);
        }
        redrawComparisonCanvas();
    }
}
// Tool: Numeral Display
function setupNumeralDisplay() {
    if (!numeralDisplayState.canvas) return;
    const state = numeralDisplayState;
    const getMousePos = (e) => {
        const rect = state.canvas.getBoundingClientRect();
        return { x: e.clientX - rect.left, y: e.clientY - rect.top };
    };
    const startDrawing = (e) => {
        state.drawing = true;
        state.currentPath = [getMousePos(e)];
    };
    const draw = (e) => {
        const pos = getMousePos(e);
        state.cursor.style.left = `${pos.x}px`;
        state.cursor.style.top = `${pos.y}px`;
        if (!state.drawing) return;
        state.currentPath.push(pos);
        redrawNumeralCanvas();
    };
    const stopDrawing = () => {
        if (!state.drawing) return;
        state.drawing = false;
        state.paths.push(state.currentPath);
    };
    addManagedListener(state.canvas, 'mousedown', startDrawing);
    addManagedListener(state.canvas, 'mousemove', draw);
    addManagedListener(state.canvas, 'mouseup', stopDrawing);
    addManagedListener(state.canvas, 'mouseleave', () => {
        stopDrawing();
        state.cursor.style.display = 'none';
    });
    addManagedListener(state.canvas, 'mouseenter', () => {
        state.cursor.style.display = 'block';
    });
    
    addManagedListener(document.getElementById('clearBtn'), 'click', () => {
        state.paths = [];
        state.currentPath = [];
        redrawNumeralCanvas();
    });
    addManagedListener(document.getElementById('undoBtn'), 'click', () => {
        state.paths.pop();
        state.currentPath = [];
        redrawNumeralCanvas();
    });
}
function redrawNumeralCanvas() {
    const { ctx, canvas, paths, currentPath } = numeralDisplayState;
    if (!ctx) return;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.strokeStyle = "#22c55e";
    ctx.lineWidth = 30;
    ctx.globalAlpha = 0.5;
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';
    const drawPath = (path) => {
        if (path.length < 2) return;
        ctx.beginPath();
        ctx.moveTo(path[0].x, path[0].y);
        for (let i = 1; i < path.length; i++) {
            ctx.lineTo(path[i].x, path[i].y);
        }
        ctx.stroke();
    };
    paths.forEach(drawPath);
    if (currentPath.length > 0) drawPath(currentPath);
}
function drawNumeralDisplay() {
    htmlDisplay.classList.remove('hidden');
    canvas3DGlobal.classList.add('hidden');
    
    const numStr = document.getElementById('numeralInput').value.toString();
    if (!numStr) {
        htmlDisplay.innerHTML = '';
        stepsContentContainer.innerHTML = `<p class="text-xl text-slate-500">Enter a number to see it displayed.</p>`;
        return;
    }
    htmlDisplay.innerHTML = `<span id="numeralText" style="font-family: 'Comic Sans MS', cursive, sans-serif; line-height: 1;">${numStr}</span>`;
    
    requestAnimationFrame(() => {
        const textSpan = document.getElementById('numeralText');
        if (!textSpan) return;
        const containerWidth = htmlDisplay.clientWidth;
        const fontSize = Math.min(320, containerWidth / (numStr.length * 0.6 + 0.4));
        textSpan.style.fontSize = `${fontSize}px`;
        requestAnimationFrame(() => {
            const canvas = document.createElement('canvas');
            canvas.id = 'numeralDrawingCanvas';
            canvas.width = htmlDisplay.clientWidth;
            canvas.height = htmlDisplay.clientHeight;
            htmlDisplay.appendChild(canvas);
            const cursor = document.createElement('div');
            cursor.id = 'customCursor';
            htmlDisplay.appendChild(cursor);
            numeralDisplayState = {
                canvas,
                ctx: canvas.getContext('2d'),
                cursor,
                drawing: false,
                paths: [],
                currentPath: []
            };
            setupNumeralDisplay();
        });
    });
    
    const answerIsOn = answerToggleBtn.classList.contains('toggle-on');
    calculationStepsColumn.style.display = answerIsOn ? 'flex' : 'none';
    stepsContentContainer.innerHTML = `<p class="text-xl text-slate-700">Trace over the number with the drawing tool.</p>`;
}
// Tool: Word Problem Visualizer
function drawWordProblemVisualizer() {
    htmlDisplay.innerHTML = '';
    htmlDisplay.className = 'display-area p-8 items-center justify-center';
    const text = document.getElementById('wordProblemText').value;
    const textContainer = document.createElement('div');
    textContainer.textContent = text;
    textContainer.className = 'text-3xl md:text-4xl lg:text-5xl';
    textContainer.style.fontFamily = "'Times New Roman', Times, serif";
    textContainer.style.textAlign = 'center';
    textContainer.style.lineHeight = '1.4';
    textContainer.style.color = '#1e293b';
    htmlDisplay.appendChild(textContainer);
    const answerIsOn = answerToggleBtn.classList.contains('toggle-on');
    calculationStepsColumn.style.display = answerIsOn ? 'flex' : 'none';
    const resultData = calculateWordProblem();
    stepsContentContainer.innerHTML = `<div class="text-3xl md:text-4xl lg:text-5xl">${resultData.html}</div>`;
    if (window.MathJax && window.MathJax.startup) {
        MathJax.startup.promise.then(() => {
            MathJax.typesetPromise([stepsContentContainer]).catch(err => console.error('MathJax typeset error:', err));
        });
    }
}
function calculateWordProblem() {
    const text = document.getElementById('wordProblemText').value;
    const numbers = text.match(/\d+(\.\d+)?/g)?.map(Number);
    if (!numbers || numbers.length < 2) {
        return { html: "<p class='text-xl'>Not enough numbers found.</p>", equation: "" };
    }
    let op = '';
    let result = 0;
    let opSymbol = '';
    if (/\beach\b|product|times/i.test(text)) {
        op = 'multiplication';
        opSymbol = '\\times';
        result = numbers.reduce((a, b) => a * b);
    } else if (/\b(total|sum|altogether|in all)\b/i.test(text)) {
        op = 'addition';
        opSymbol = '+';
        result = numbers.reduce((a, b) => a + b);
    } else if (/\b(left|difference|how many more)\b/i.test(text)) {
        op = 'subtraction';
        opSymbol = '-';
        numbers.sort((a, b) => b - a);
        result = numbers[0] - numbers[1];
    } else if (/\b(split|share|divide)\b/i.test(text)) {
        op = 'division';
        opSymbol = '\\div';
        numbers.sort((a, b) => b - a);
        result = numbers[0] / numbers[1];
    } else {
        return { html: "<p class='text-xl'>Could not determine operation.</p>", equation: "" };
    }
    const equation = numbers.join(` ${opSymbol} `) + ` = ${result}`;
    const html = `$$${equation}$$`;
    
    return { html, equation };
}
// Tool: Measurement Comparison
const measurementUnits = {
    length: { base: 'm', units: { 'mm': 0.001, 'cm': 0.01, 'dm': 0.1, 'm': 1, 'dam': 10, 'hm': 100, 'km': 1000, 'in': 0.0254, 'ft': 0.3048, 'yd': 0.9144, 'mi': 1609.34 } },
    weight: { base: 'g', units: { 'mg': 0.001, 'g': 1, 'kg': 1000, 'oz': 28.3495, 'lb': 453.592 } },
    volume: { base: 'L', units: { 'mL': 0.001, 'L': 1, 'fl oz': 0.0295735, 'c': 0.24, 'pt': 0.473176, 'qt': 0.946353, 'gal': 3.78541 } }
};
const barColors = ['#16a34a', '#2563eb', '#ca8a04', '#c026d3', '#db2777', '#d97706'];
function setupMeasurementComparator() {
    const typeSelector = document.getElementById('measurementType');
    const toggleButton = document.getElementById('teachQuestionToggle');
    const addButton = document.getElementById('addComparatorItem');
    const container = document.getElementById('comparatorInputsContainer');
    container.innerHTML = '';
    typeSelector.innerHTML = Object.keys(measurementUnits).map(key => `<option value="${key}">${key.charAt(0).toUpperCase() + key.slice(1)}</option>`).join('');
    addManagedListener(typeSelector, 'change', () => {
        updateAllMeasurementUnits();
        handleDraw();
    });
    
    addManagedListener(toggleButton, 'click', () => {
        measurementComparatorState.mode = measurementComparatorState.mode === 'teach' ? 'question' : 'teach';
        toggleButton.textContent = `Mode: ${measurementComparatorState.mode.charAt(0).toUpperCase() + measurementComparatorState.mode.slice(1)}`;
        handleDraw();
    });
    addManagedListener(addButton, 'click', () => addComparatorItem());
    addComparatorItem(null, '1', 'km');
    addComparatorItem(null, '1200', 'm');
}
function addComparatorItem(id = null, value = '1', unit = null) {
    const container = document.getElementById('comparatorInputsContainer');
    if (!id) {
        id = String.fromCharCode(65 + container.children.length);
    }
    const itemIndex = container.children.length;
    const color = barColors[itemIndex % barColors.length];
    const bgColor = `${color}1A`; 
    const itemDiv = document.createElement('div');
    itemDiv.id = `comparator-item-${id}`;
    itemDiv.className = 'p-3 border rounded-lg flex-1 flex items-center gap-x-4 gap-y-2 flex-wrap';
    itemDiv.style.borderColor = color;
    itemDiv.style.backgroundColor = bgColor;
    itemDiv.innerHTML = `
        <span class="font-bold text-lg" style="color: ${color};">${id}:</span>
        <input type="number" value="${value}" min="0" class="w-24 p-1 border-2 rounded-lg text-center comparator-value">
        <select class="bg-white p-1 rounded-md border border-slate-200 text-sm comparator-unit"></select>
        <button class="remove-item-btn font-bold text-red-500 ml-auto text-xl">×</button>
    `;
    
    container.appendChild(itemDiv);
    const unitSelect = itemDiv.querySelector('.comparator-unit');
    populateUnitSelect(unitSelect);
    if (unit) {
        unitSelect.value = unit;
    }
    addManagedListener(itemDiv.querySelector('.remove-item-btn'), 'click', () => {
        itemDiv.remove();
        const remainingItems = container.children;
        for(let i=0; i < remainingItems.length; i++) {
            const newId = String.fromCharCode(65 + i);
            const label = remainingItems[i].querySelector('span');
            const color = barColors[i % barColors.length];
            label.textContent = `${newId}:`;
            label.style.color = color;
            remainingItems[i].style.borderColor = color;
            remainingItems[i].style.backgroundColor = `${color}1A`;
        }
        handleDraw();
    });
    
    itemDiv.querySelectorAll('input, select').forEach(el => addManagedListener(el, 'input', handleDraw));
    handleDraw();
}
function populateUnitSelect(selectElement) {
    const type = document.getElementById('measurementType').value;
    if (!type) return;
    const { units } = measurementUnits[type];
    const currentVal = selectElement.value;
    selectElement.innerHTML = Object.keys(units).map(unit => `<option value="${unit}">${unit}</option>`).join('');
    if (Object.keys(units).includes(currentVal)) {
        selectElement.value = currentVal;
    }
}
function updateAllMeasurementUnits() {
    document.querySelectorAll('.comparator-unit').forEach(populateUnitSelect);
}
function calculateAllMeasurements() {
    const values = [];
    const items = document.querySelectorAll('#comparatorInputsContainer > div');
    const type = document.getElementById('measurementType').value;
    if (!type) return [];
    const conversionInfo = measurementUnits[type];
    items.forEach((item, index) => {
        const id = String.fromCharCode(65 + index);
        const valueInput = item.querySelector('.comparator-value');
        const unitSelect = item.querySelector('.comparator-unit');
        
        if (valueInput && unitSelect) {
            const value = parseFloat(valueInput.value) || 0;
            const unit = unitSelect.value;
            const totalInBase = value * (conversionInfo.units[unit] || 1);
            values.push({ id, value, unit, totalInBase, baseUnit: conversionInfo.base });
        }
    });
    return values;
}
function drawMeasurementComparator() {
    interactiveDisplay.innerHTML = ''; 
    const canvas = document.createElement('canvas');
    canvas.width = interactiveDisplay.clientWidth;
    canvas.height = interactiveDisplay.clientHeight;
    interactiveDisplay.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    const allValues = calculateAllMeasurements();
    
    updateComparatorLayout();
    
    if (measurementComparatorState.mode === 'teach' || (measurementComparatorState.mode === 'question' && answerToggleBtn.classList.contains('toggle-on'))) {
        drawComparisonBars(ctx, allValues);
    }
    
    calculateAndDisplayMeasurementResult(allValues);
}
function updateComparatorLayout() {
    const isTeachMode = measurementComparatorState.mode === 'teach';
    const answerIsOn = answerToggleBtn.classList.contains('toggle-on');
    interactiveResult.classList.remove('hidden');
    if (isTeachMode) {
        interactiveDisplay.classList.remove('hidden');
        interactiveResult.classList.toggle('hidden', !answerIsOn);
        interactiveResultTitle.textContent = "Comparison Result:";
    } else {
        interactiveResult.classList.remove('hidden');
        interactiveDisplay.classList.toggle('hidden', !answerIsOn);
        interactiveResultTitle.textContent = "Which is greatest?";
    }
}
function drawComparisonBars(ctx, values) {
    const w = ctx.canvas.width;
    const h = ctx.canvas.height;
    
    ctx.clearRect(0, 0, w, h);
    
    if (!values || values.length === 0) return;
    const padding = 50;
    const topY = padding;
    const bottomY = h - padding;
    const availableHeight = bottomY - topY;
    
    const numItems = values.length;
    const totalGapWidth = (padding / 2) * (numItems - 1);
    const barWidth = (w - 2 * padding - totalGapWidth) / numItems;
    
    const maxValue = Math.max(1, ...values.map(v => v.totalInBase));
    
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
    ctx.lineWidth = 1;
    for (let i = 1; i < 10; i++) {
        const y = topY + i * (availableHeight / 10);
        ctx.beginPath();
        ctx.moveTo(padding, y);
        ctx.lineTo(w - padding, y);
        ctx.stroke();
    }
    
    values.forEach((item, index) => {
        const barHeight = (item.totalInBase / maxValue) * availableHeight;
        const barX = padding + index * (barWidth + padding / 2);
        
        ctx.save();
        ctx.shadowColor = 'rgba(0,0,0,0.3)';
        ctx.shadowBlur = 8;
        ctx.shadowOffsetX = 4;
        ctx.shadowOffsetY = 4;
        
        const gradient = ctx.createLinearGradient(0, bottomY - barHeight, 0, bottomY);
        gradient.addColorStop(0, '#87CEFA');
        gradient.addColorStop(1, '#007bff');
        ctx.fillStyle = gradient;
        ctx.fillRect(barX, bottomY - barHeight, barWidth, barHeight);
        ctx.restore();
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 2;
        ctx.strokeRect(barX, bottomY - barHeight, barWidth, barHeight);
        ctx.fillStyle = '#111827';
        ctx.font = 'bold 16px Montserrat';
        ctx.textAlign = 'center';
        const displayValue = item.value < 0.01 && item.value > 0 ? item.value.toExponential(2) : item.value.toLocaleString();
        ctx.fillText(`${displayValue} ${item.unit}`, barX + barWidth / 2, bottomY + 25);
    });
}
function calculateAndDisplayMeasurementResult(values) {
    if (!values || values.length === 0) {
        interactiveResultContent.innerHTML = `<p class="text-slate-400">Add a measurement to begin.</p>`;
        return;
    }
    
    const sorted = [...values].sort((a, b) => b.totalInBase - a.totalInBase);
    
    let resultHtml;
    if (measurementComparatorState.mode === 'teach') {
        interactiveResultTitle.textContent = "Comparison Results (Ranked):";
        let mathjaxStr = '\\begin{align*}';
        sorted.forEach(v => {
            mathjaxStr += `\\text{${v.id}:} &\\quad ${v.value.toLocaleString()}\\,\\text{${v.unit}} \\\\`;
        });
        mathjaxStr += '\\end{align*}';
        resultHtml = `<div class="text-3xl md:text-4xl lg:text-5xl text-left">$$${mathjaxStr}$$</div>`;
    } else { // Question mode
        interactiveResultTitle.textContent = "Which is greatest?";
        const greatest = sorted[0];
        resultHtml = `<div class="text-3xl md:text-4xl lg:text-5xl">$$${greatest.value.toLocaleString()}\\,\\text{${greatest.unit}}$$</div>`;
    }
    interactiveResultContent.innerHTML = resultHtml;
}
// Tool: Shape Classifier
const shapeProperties = {
    // 2D Shapes
    square: { name: "Square", type: "2D", sides: 4, vertices: 4, parallel_sides: 2, line_symmetry: 4, angleInfo: "All 4 angles are 90°." },
    rectangle: { name: "Rectangle", type: "2D", sides: 4, vertices: 4, parallel_sides: 2, line_symmetry: 2, angleInfo: "All 4 angles are 90°." },
    circle: { name: "Circle", type: "2D", sides: 1, vertices: 0, parallel_sides: "N/A", line_symmetry: "Infinite", angleInfo: "360° total angle." },
    ellipse: { name: "Ellipse", type: "2D", sides: 1, vertices: 0, parallel_sides: "N/A", line_symmetry: 2, angleInfo: "A stretched circle." },
    triangle_eq: { name: "Equilateral Triangle", type: "2D", sides: 3, vertices: 3, parallel_sides: 0, line_symmetry: 3, angleInfo: "All 3 angles are 60°." },
    triangle_iso: { name: "Isosceles Triangle", type: "2D", sides: 3, vertices: 3, parallel_sides: 0, line_symmetry: 1, angleInfo: "Two equal sides, two equal angles." },
    triangle_right: { name: "Right-Angled Triangle", type: "2D", sides: 3, vertices: 3, parallel_sides: 0, line_symmetry: "Varies (0 or 1)", angleInfo: "One angle is 90°." },
    triangle_scalene: { name: "Scalene Triangle", type: "2D", sides: 3, vertices: 3, parallel_sides: 0, line_symmetry: 0, angleInfo: "No equal sides or angles." },
    rhombus: { name: "Rhombus", type: "2D", sides: 4, vertices: 4, parallel_sides: 2, line_symmetry: 2, angleInfo: "All sides equal length. Opposite angles are equal." },
    parallelogram: { name: "Parallelogram", type: "2D", sides: 4, vertices: 4, parallel_sides: 2, line_symmetry: 0, angleInfo: "Opposite sides are parallel and equal in length." },
    trapezoid: { name: "Trapezoid", type: "2D", sides: 4, vertices: 4, parallel_sides: 1, line_symmetry: "Varies (0 or 1)", angleInfo: "One pair of parallel sides." },
    kite: { name: "Kite", type: "2D", sides: 4, vertices: 4, parallel_sides: 0, line_symmetry: 1, angleInfo: "Two pairs of equal-length sides that are adjacent to each other." },
    pentagon: { name: "Regular Pentagon", type: "2D", sides: 5, vertices: 5, parallel_sides: 0, line_symmetry: 5, angleInfo: "Each interior angle is 108°." },
    hexagon: { name: "Regular Hexagon", type: "2D", sides: 6, vertices: 6, parallel_sides: 3, line_symmetry: 6, angleInfo: "Each interior angle is 120°." },
    octagon: { name: "Regular Octagon", type: "2D", sides: 8, vertices: 8, parallel_sides: 4, line_symmetry: 8, angleInfo: "Each interior angle is 135°." },
    // 3D Shapes
    cube: { name: "Cube", type: "3D", faces: 6, vertices: 8, edges: 12, face_shape: "Square" },
    cuboid: { name: "Cuboid (Rectangular Prism)", type: "3D", faces: 6, vertices: 8, edges: 12, face_shape: "Rectangle" },
    sphere: { name: "Sphere", type: "3D", faces: 1, vertices: 0, edges: 0, face_shape: "Curved surface" },
    cylinder: { name: "Cylinder", type: "3D", faces: 3, vertices: 0, edges: 2, face_shape: "2 Circles, 1 Rectangle (unrolled)" },
    cone: { name: "Cone", type: "3D", faces: 2, vertices: 1, edges: 1, face_shape: "1 Circle, 1 Sector (unrolled)" },
    pyramid_sq: { name: "Square-Based Pyramid", type: "3D", faces: 5, vertices: 5, edges: 8, face_shape: "1 Square, 4 Triangles" },
    prism_tri: { name: "Triangular Prism", type: "3D", faces: 5, vertices: 6, edges: 9, face_shape: "2 Triangles, 3 Rectangles" },
    tetrahedron: { name: "Tetrahedron (Regular)", type: "3D", faces: 4, vertices: 4, edges: 6, face_shape: "Equilateral Triangle" },
    torus: { name: "Torus", type: "3D", faces: 1, vertices: 0, edges: 0, face_shape: "Curved surface (donut)" },
    prism_pent: { name: "Pentagonal Prism", type: "3D", faces: 7, vertices: 10, edges: 15, face_shape: "2 Pentagons, 5 Rectangles" },
    prism_hex: { name: "Hexagonal Prism", type: "3D", faces: 8, vertices: 12, edges: 18, face_shape: "2 Hexagons, 6 Rectangles" },
};
function setupShapeClassifier() {
    const selector = document.getElementById('shapeSelect');
    selector.innerHTML = Object.keys(shapeProperties).map(key => `<option value="${key}">${shapeProperties[key].name}</option>`).join('');
    
    addManagedListener(selector, 'change', handleDraw);
    const toggleButton = document.getElementById('shapeClassifierToggle');
    addManagedListener(toggleButton, 'click', () => {
        shapeClassifierState.mode = shapeClassifierState.mode === 'teach' ? 'question' : 'teach';
        toggleButton.textContent = `Mode: ${shapeClassifierState.mode.charAt(0).toUpperCase() + shapeClassifierState.mode.slice(1)}`;
        handleDraw();
    });
}
function drawShapeClassifier() {
    const shapeKey = document.getElementById('shapeSelect').value;
    const shape = shapeProperties[shapeKey];
    
    const isTeachMode = shapeClassifierState.mode === 'teach';
    const answerIsOn = answerToggleBtn.classList.contains('toggle-on');
    let showShape;
    if (isTeachMode) {
        showShape = true; 
        stepsContentTitle.textContent = "Properties:";
        calculationStepsColumn.style.display = answerIsOn ? 'flex' : 'none';
    } else { // Question Mode
        showShape = answerIsOn; 
        stepsContentTitle.textContent = "What shape has these properties?";
        calculationStepsColumn.style.display = 'flex';
    }
    if (showShape) {
        if (shape.type === '3D') {
            draw3DShape(shapeKey, standardDisplayArea);
        } else {
            draw2DShape(shapeKey, htmlDisplay);
        }
    } else {
        cleanupThreeScene();
        htmlDisplay.classList.remove('hidden');
        htmlDisplay.innerHTML = '<p class="text-8xl text-slate-500 font-bold">?</p>';
    }
    
    stepsContentContainer.innerHTML = calculateShapeProperties(shape, isTeachMode);
}
function draw3DShape(key, container, dims = null) {
    cleanupThreeScene();
    htmlDisplay.classList.add('hidden');
    canvas3DGlobal.classList.remove('hidden');
    
    const width = canvas3DGlobal.clientWidth;
    const height = canvas3DGlobal.clientHeight;
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0xdbeafe);
    camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({ canvas: canvas3DGlobal, antialias: true, alpha: true });
    renderer.setSize(width, height);
    renderer.setPixelRatio(window.devicePixelRatio);
    labelRenderer = new THREE.CSS2DRenderer();
    labelRenderer.setSize(width, height);
    labelRenderer.domElement.style.position = 'absolute';
    labelRenderer.domElement.style.top = '0px';
    labelRenderer.domElement.style.pointerEvents = 'none';
    labelRenderer.domElement.classList.add('css2d-container');
    container.appendChild(labelRenderer.domElement);
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
    scene.add(ambientLight);
    const light = new THREE.DirectionalLight(0xffffff, 0.9);
    light.position.set(5, 10, 7);
    scene.add(light);
    let geometry;
    const s = 1.5; 
    switch (key) {
        case 'cube': geometry = new THREE.BoxGeometry(s, s, s); break;
        case 'cuboid': geometry = new THREE.BoxGeometry(s * 1.5, s * 0.8, s); break;
        case 'sphere': geometry = new THREE.SphereGeometry(s * 0.9, 32, 16); break;
        case 'cylinder': geometry = new THREE.CylinderGeometry(s / 2, s / 2, s * 1.5, 32); break;
        case 'cone': geometry = new THREE.ConeGeometry(s / 1.5, s * 1.5, 32); break;
        case 'pyramid_sq': geometry = new THREE.ConeGeometry(s, s * 1.2, 4); geometry.rotateY(Math.PI / 4); break;
        case 'prism_tri': geometry = new THREE.CylinderGeometry(s / 1.5, s / 1.5, s * 1.8, 3); break;
        case 'tetrahedron': geometry = new THREE.TetrahedronGeometry(s); break;
        case 'torus': geometry = new THREE.TorusGeometry(s * 0.8, s * 0.3, 16, 100); break;
        case 'prism_pent': geometry = new THREE.CylinderGeometry(s / 1.5, s / 1.5, s * 1.8, 5); break;
        case 'prism_hex': geometry = new THREE.CylinderGeometry(s / 1.5, s / 1.5, s * 1.8, 6); break;
        default: geometry = new THREE.BoxGeometry(s, s, s);
    }
    const material = new THREE.MeshStandardMaterial({
        color: 0x007bff,
        roughness: 0.7,
        metalness: 0.1,
        transparent: true,
        opacity: 0.75,
    });
    object3D = new THREE.Mesh(geometry, material);
    scene.add(object3D);
    const edges = new THREE.EdgesGeometry(geometry);
    object3D.add(new THREE.LineSegments(edges, new THREE.LineBasicMaterial({ color: 0x000000, linewidth: 2 })));
    if (dims) {
        const createLabel = (text, position) => {
            const div = document.createElement('div');
            div.className = 'dimension-label';
            div.textContent = text;
            const label = new THREE.CSS2DObject(div);
            label.position.copy(position);
            return label;
        };
        
        const geomDims = {
            s: s,
            cuboidW: s * 1.5, cuboidH: s * 0.8, cuboidD: s,
            sphereR: s * 0.9,
            cylR: s / 2, cylH: s * 1.5,
            coneR: s / 1.5, coneH: s * 1.5,
            pyrBase: s, pyrH: s * 1.2
        };
        switch (key) {
            case 'sphere': {
                const radiusLineMat = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 3 });
                const radiusPoints = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(geomDims.sphereR, 0, 0)];
                const radiusLineGeom = new THREE.BufferGeometry().setFromPoints(radiusPoints);
                const radiusLine = new THREE.Line(radiusLineGeom, radiusLineMat);
                object3D.add(radiusLine);
                object3D.add(createLabel(`r = ${dims.r}`, new THREE.Vector3(geomDims.sphereR / 2, geomDims.sphereR * 0.2, 0)));
                break;
            }
            case 'cube':
                object3D.add(createLabel(`s = ${dims.s}`, new THREE.Vector3(0, geomDims.s / 2 + 0.2, 0)));
                break;
            case 'cuboid':
                object3D.add(createLabel(`l=${dims.l}`, new THREE.Vector3(0, geomDims.cuboidH / 2 + 0.2, 0)));
                object3D.add(createLabel(`w=${dims.w}`, new THREE.Vector3(geomDims.cuboidW / 2 + 0.2, 0, 0)));
                object3D.add(createLabel(`h=${dims.h}`, new THREE.Vector3(0, 0, geomDims.cuboidD / 2 + 0.2)));
                break;
            case 'cylinder': {
                const radiusLineMat = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 3 });
                const radiusPoints = [new THREE.Vector3(0, -geomDims.cylH/2, 0), new THREE.Vector3(geomDims.cylR, -geomDims.cylH/2, 0)];
                const radiusLineGeom = new THREE.BufferGeometry().setFromPoints(radiusPoints);
                object3D.add(new THREE.Line(radiusLineGeom, radiusLineMat));
                object3D.add(createLabel(`r = ${dims.r}`, new THREE.Vector3(geomDims.cylR / 2, -geomDims.cylH/2, 0)));
                object3D.add(createLabel(`h = ${dims.h}`, new THREE.Vector3(-geomDims.cylR - 0.2, 0, 0)));
                break;
            }
            case 'cone': {
                const radiusLineMat = new THREE.LineBasicMaterial({ color: 0xff0000, linewidth: 3 });
                const radiusPoints = [new THREE.Vector3(0, -geomDims.coneH/2, 0), new THREE.Vector3(geomDims.coneR, -geomDims.coneH/2, 0)];
                const radiusLineGeom = new THREE.BufferGeometry().setFromPoints(radiusPoints);
                object3D.add(new THREE.Line(radiusLineGeom, radiusLineMat));
                object3D.add(createLabel(`r = ${dims.r}`, new THREE.Vector3(geomDims.coneR / 2, -geomDims.coneH/2, 0)));
                object3D.add(createLabel(`h = ${dims.h}`, new THREE.Vector3(-geomDims.coneR/2 - 0.2, 0, 0)));
                break;
            }
            case 'pyramid_sq':
                object3D.add(createLabel(`h = ${dims.h}`, new THREE.Vector3(0.2, 0, 0)));
                object3D.add(createLabel(`base = ${dims.b}`, new THREE.Vector3(0, -geomDims.pyrH/2 - 0.2, 0)));
                break;
        }
    }
    camera.position.z = s * 3.5;
    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.autoRotate = true;
    controls.autoRotateSpeed = 0.8;
    controls.enableDamping = true;
    function animate() {
        animationFrameId = requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
        if (labelRenderer) {
            labelRenderer.render(scene, camera);
        }
    }
    animate();
}
function draw2DShape(key, container) {
    container.classList.remove('hidden');
    canvas3DGlobal.classList.add('hidden');
    container.innerHTML = '';
    const canvas = document.createElement('canvas');
    const parentDisplayArea = document.getElementById('standardDisplayArea');
    let size = Math.min(parentDisplayArea.clientWidth, parentDisplayArea.clientHeight) * 0.8;
    if (size <= 0) {
        size = 300; 
    }
    canvas.width = size;
    canvas.height = size;
    
    container.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    const w = canvas.width;
    const h = canvas.height;
    const r = w / 2 * 0.8;
    const cx = w/2, cy = h/2;
    ctx.save();
    ctx.shadowColor = 'rgba(0,0,0,0.3)';
    ctx.shadowBlur = 10;
    ctx.shadowOffsetX = 5;
    ctx.shadowOffsetY = 5;
    const gradient = ctx.createLinearGradient(cx - r, cy - r, cx + r, cy + r);
    gradient.addColorStop(0, '#87CEFA'); 
    gradient.addColorStop(1, '#007bff'); 
    ctx.fillStyle = gradient;
    ctx.strokeStyle = '#000000';
    ctx.lineWidth = 3;
    ctx.beginPath();
    
    let angle, startAngle;
    switch(key) {
        case 'square': ctx.rect(cx - r/Math.sqrt(2), cy - r/Math.sqrt(2), 2*r/Math.sqrt(2), 2*r/Math.sqrt(2)); break;
        case 'rectangle': ctx.rect(cx-r, cy-r/2, r*2, r); break;
        case 'circle': ctx.arc(cx, cy, r, 0, 2*Math.PI); break;
        case 'ellipse': ctx.ellipse(cx, cy, r, r * 0.6, 0, 0, 2 * Math.PI); break;
        case 'triangle_eq': for(let i=0; i<3; i++) { ctx[i===0?'moveTo':'lineTo'](cx + r * Math.cos(-Math.PI/2 + i*2*Math.PI/3), cy + r * Math.sin(-Math.PI/2 + i*2*Math.PI/3)); } break;
        case 'triangle_iso': ctx.moveTo(cx, cy-r); ctx.lineTo(cx-r, cy+r/2); ctx.lineTo(cx+r, cy+r/2); break;
        case 'triangle_right': ctx.moveTo(cx - r, cy - r); ctx.lineTo(cx - r, cy + r); ctx.lineTo(cx + r, cy + r); break;
        case 'triangle_scalene': ctx.moveTo(cx - r, cy + r); ctx.lineTo(cx + r, cy + r); ctx.lineTo(cx, cy - r*0.8); break;
        case 'rhombus': ctx.moveTo(cx, cy-r); ctx.lineTo(cx-r/1.5, cy); ctx.lineTo(cx, cy+r); ctx.lineTo(cx+r/1.5, cy); break;
        case 'parallelogram': ctx.moveTo(cx - r, cy - r/2); ctx.lineTo(cx, cy - r/2); ctx.lineTo(cx + r, cy + r/2); ctx.lineTo(cx, cy + r/2); break;
        case 'trapezoid': ctx.moveTo(cx - r, cy + r/2); ctx.lineTo(cx + r, cy + r/2); ctx.lineTo(cx + r/2, cy - r/2); ctx.lineTo(cx - r/2, cy - r/2); break;
        case 'kite': ctx.moveTo(cx, cy - r); ctx.lineTo(cx - r/2, cy); ctx.lineTo(cx, cy + r); ctx.lineTo(cx + r/2, cy); break;
        case 'pentagon': angle=2*Math.PI/5; startAngle=-Math.PI/2; for(let i=0; i<5; i++) {ctx[i===0?'moveTo':'lineTo'](cx+r*Math.cos(startAngle+i*angle),cy+r*Math.sin(startAngle+i*angle));} break;
        case 'hexagon': angle=2*Math.PI/6; startAngle=-Math.PI/6; for(let i=0; i<6; i++) {ctx[i===0?'moveTo':'lineTo'](cx+r*Math.cos(startAngle+i*angle),cy+r*Math.sin(startAngle+i*angle));} break;
        case 'octagon': angle=2*Math.PI/8; startAngle=-Math.PI/8; for(let i=0; i<8; i++) {ctx[i===0?'moveTo':'lineTo'](cx+r*Math.cos(startAngle+i*angle),cy+r*Math.sin(startAngle+i*angle));} break;
    }
    ctx.closePath();
    ctx.fill();
    ctx.stroke();
    ctx.restore();
}
function calculateShapeProperties(shape, isTeachMode) {
    if (!isTeachMode) {
        return `<div class="text-3xl md:text-4xl lg:text-5xl">$$${shape.name}$$</div>`;
    }
    let mathjaxStr = '\\begin{align*}';
    for(const [key, value] of Object.entries(shape)) {
        if (key === 'name') continue;
        const formattedKey = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        mathjaxStr += `\\text{${formattedKey}:} & \\quad \\text{${value}} \\\\`;
    }
    mathjaxStr += '\\end{align*}';
    return `<div class="text-3xl md:text-4xl lg:text-5xl text-left">$$${mathjaxStr}$$</div>`;
}
// Tool: Sphere Volume & SA
function calculateSphereVolumeSteps(radius) {
    if (isNaN(radius) || radius <= 0) return ["Error: Radius must be a positive number."];
    const volume = (4 / 3) * Math.PI * Math.pow(radius, 3);
    return [
        `V = \\frac{4}{3} \\pi r^3`,
        `V = \\frac{4}{3} \\pi (${radius})^3`,
        `V \\approx ${volume.toFixed(2)}`
    ];
}
function calculateSphereSurfaceAreaSteps(radius) {
    if (isNaN(radius) || radius <= 0) return ["Error: Radius must be a positive number."];
    const surfaceArea = 4 * Math.PI * Math.pow(radius, 2);
    return [
        `SA = 4 \\pi r^2`,
        `SA = 4 \\pi (${radius})^2`,
        `SA \\approx ${surfaceArea.toFixed(2)}`
    ];
}
// Tool: Tally Chart
function setupTallyChart() {
    const addBtn = document.getElementById('add-tally-row');
    addManagedListener(addBtn, 'click', () => addTallyRow());
    addTallyRow('Apples', 7);
    addTallyRow('Oranges', 12);
}
function addTallyRow(category = '', count = 5) {
    const container = document.getElementById('tally-rows-container');
    const rowDiv = document.createElement('div');
    rowDiv.className = 'flex items-center gap-2 p-2 border rounded-lg bg-slate-50';
    rowDiv.innerHTML = `
        <input type="text" value="${category}" placeholder="Category" class="tally-category w-32 p-1 border-2 rounded-lg">
        <input type="number" value="${count}" min="0" class="tally-count w-20 p-1 border-2 rounded-lg text-center">
        <button class="remove-tally-row font-bold text-red-500 ml-auto text-xl px-2">×</button>
    `;
    container.appendChild(rowDiv);
    addManagedListener(rowDiv.querySelector('.tally-category'), 'input', handleDraw);
    addManagedListener(rowDiv.querySelector('.tally-count'), 'input', handleDraw);
    addManagedListener(rowDiv.querySelector('.remove-tally-row'), 'click', (e) => {
        e.target.closest('div').remove();
        handleDraw();
    });
    handleDraw();
}
function drawTallyChart() {
    interactiveDisplay.innerHTML = '';
    const rows = document.querySelectorAll('#tally-rows-container > div');
    if (rows.length === 0) {
        interactiveDisplay.innerHTML = `<p class="text-slate-500">Add a row to start creating a tally chart.</p>`;
        return;
    }
    const table = document.createElement('table');
    table.className = 'w-full max-w-2xl text-left border-collapse';
    table.innerHTML = `
        <thead class="bg-slate-200">
            <tr>
                <th class="p-3 text-lg font-semibold text-slate-700">Category</th>
                <th class="p-3 text-lg font-semibold text-slate-700">Tally</th>
                <th class="p-3 text-lg font-semibold text-slate-700">Frequency</th>
            </tr>
        </thead>
        <tbody></tbody>
    `;
    const tbody = table.querySelector('tbody');
    rows.forEach(row => {
        const category = row.querySelector('.tally-category').value || 'Unnamed';
        const count = parseInt(row.querySelector('.tally-count').value, 10) || 0;
        const numGroups = Math.floor(count / 5);
        const remainder = count % 5;
        let tallyHtml = '';
        for (let i = 0; i < numGroups; i++) {
            tallyHtml += `<span class="tally-group">||||<span class="tally-slash"></span></span>`;
        }
        if (remainder > 0) {
            tallyHtml += '<span>' + '|'.repeat(remainder) + '</span>';
        }
        const tr = document.createElement('tr');
        tr.className = 'border-b border-slate-200';
        tr.innerHTML = `
            <td class="p-3 font-medium text-slate-800 text-3xl">$$\\text{${category}}$$</td>
            <td class="p-3 tally-marks">${tallyHtml}</td>
            <td class="p-3 font-bold text-slate-800 text-center text-5xl">$$${count}$$</td>
        `;
        tbody.appendChild(tr);
    });
    interactiveDisplay.appendChild(table);
}
// Tool: Place Value
function drawPlaceValue() {
    const numStr = document.getElementById('placeValueNumber').value.trim();
    interactiveDisplay.innerHTML = '';
    if (numStr === '' || isNaN(parseFloat(numStr))) {
        interactiveDisplay.innerHTML = '<p class="text-slate-500">Please enter a valid number.</p>';
        return;
    }
    const [integerPart, fractionalPart] = numStr.split('.');
    const integerNames = ['Ones', 'Tens', 'Hundreds', 'Thousands', 'Ten Thousands', 'Hundred Thousands', 'Millions'];
    const fractionalNames = ['Tenths', 'Hundredths', 'Thousandths', 'Ten Thousandths'];
    const container = document.createElement('div');
    container.className = 'flex flex-wrap items-end justify-center';
    integerPart.split('').reverse().forEach((digit, i) => {
        const col = document.createElement('div');
        col.className = 'place-value-col';
        col.innerHTML = `
            <div class="place-value-label text-xl">$$\\text{${integerNames[i] || `10^${i}`}}$$</div>
            <div class="place-value-digit">$$${digit}$$</div>
        `;
        container.prepend(col);
    });
    if (fractionalPart !== undefined) {
        const decimalCol = document.createElement('div');
        decimalCol.className = 'decimal-point-col';
        decimalCol.innerHTML = '<div class="place-value-digit" style="border-bottom: none;">$$ . $$</div>';
        container.appendChild(decimalCol);
        fractionalPart.split('').forEach((digit, i) => {
            const col = document.createElement('div');
            col.className = 'place-value-col';
            col.innerHTML = `
                <div class="place-value-label text-xl">$$\\text{${fractionalNames[i] || `10^{-${i+1}}`}}$$</div>
                <div class="place-value-digit">$$${digit}$$</div>
            `;
            container.appendChild(col);
        });
    }
    interactiveDisplay.appendChild(container);
}
// Tool: Equivalency Tool
function setupEquivalencyTool() {
    const addBtn = document.getElementById('add-equivalency-row');
    const labelToggleBtn = document.getElementById('equivalency-label-toggle-btn');
    const circleToggleBtn = document.getElementById('equivalency-circle-toggle-btn');
    addManagedListener(addBtn, 'click', () => addEquivalencyItem());
    const createToggleHandler = (stateKey, button) => () => {
        equivalencyToolState[stateKey] = !equivalencyToolState[stateKey];
        button.classList.toggle('toggle-on', equivalencyToolState[stateKey]);
        button.classList.toggle('toggle-off', !equivalencyToolState[stateKey]);
        button.firstElementChild.classList.toggle('dot-on', equivalencyToolState[stateKey]);
        handleDraw();
    };
    
    addManagedListener(labelToggleBtn, 'click', createToggleHandler('showLabels', labelToggleBtn));
    addManagedListener(circleToggleBtn, 'click', createToggleHandler('showCircles', circleToggleBtn));
    
    addEquivalencyItem("1/2", "Fraction");
    addEquivalencyItem("50", "Percent");
    addEquivalencyItem("0.5", "Decimal");
}
function addEquivalencyItem(value = '', type = 'Fraction') {
    const container = document.getElementById('equivalency-rows-container');
    const rowDiv = document.createElement('div');
    rowDiv.className = 'flex items-center gap-2 p-2 border rounded-lg bg-slate-50';
    rowDiv.innerHTML = `
        <input type="text" value="${value}" placeholder="Value" class="equivalency-value flex-grow p-1 border-2 rounded-lg">
        <select class="equivalency-type bg-white p-1 rounded-md border border-slate-200">
            <option>Fraction</option>
            <option>Decimal</option>
            <option>Percent</option>
            <option>Ratio</option>
        </select>
        <button class="remove-equivalency-row font-bold text-red-500 ml-auto text-xl px-2">×</button>
    `;
    container.appendChild(rowDiv);
    rowDiv.querySelector('.equivalency-type').value = type;
    addManagedListener(rowDiv.querySelector('.equivalency-value'), 'input', handleDraw);
    addManagedListener(rowDiv.querySelector('.equivalency-type'), 'change', handleDraw);
    addManagedListener(rowDiv.querySelector('.remove-equivalency-row'), 'click', (e) => {
        e.target.closest('div').remove();
        handleDraw();
    });
    handleDraw();
}
function parseEquivalencyInput(valueStr, type) {
    let numericValue = NaN;
    if (!valueStr) return { value: null, error: 'Empty input' };
    try {
        switch (type) {
            case 'Fraction': {
                if (valueStr.includes('/')) {
                    const [num, den] = valueStr.split('/').map(s => parseFloat(s));
                    if (!isNaN(num) && !isNaN(den) && den !== 0) numericValue = num / den;
                } else if (!isNaN(parseFloat(valueStr))) {
                    numericValue = parseFloat(valueStr);
                } else {
                    return { value: null, error: "Invalid Fraction. Use format like 1/2." };
                }
                break;
            }
            case 'Decimal':
                numericValue = parseFloat(valueStr);
                break;
            case 'Percent':
                numericValue = parseFloat(valueStr.replace('%', '')) / 100;
                break;
            case 'Ratio': {
                if (valueStr.includes(':')) {
                    const [num, den] = valueStr.split(':').map(s => parseFloat(s));
                    if (!isNaN(num) && !isNaN(den) && den !== 0) numericValue = num / den;
                }
                break;
            }
        }
    } catch { numericValue = NaN; }
    if (isNaN(numericValue)) return { value: null, error: `Invalid ${type.toLowerCase()}` };
    return { value: numericValue, error: null };
}
function drawEquivalencyTool() {
    const allValues = Array.from(document.querySelectorAll('#equivalency-rows-container > div')).map((row, index) => {
        const valueStr = row.querySelector('.equivalency-value').value;
        const type = row.querySelector('.equivalency-type').value;
        const result = parseEquivalencyInput(valueStr, type);
        return {
            id: index,
            originalStr: valueStr,
            type: type,
            numericValue: result.value,
            error: result.error,
            color: barColors[index % barColors.length]
        };
    });
    
    interactiveDisplay.innerHTML = '';
    
    const container = document.createElement('div');
    container.className = 'flex flex-wrap items-start justify-center gap-8 p-4';
    interactiveDisplay.appendChild(container);
    if (allValues.length === 0) {
        container.innerHTML = `<p class="text-slate-500">Add an item to begin.</p>`;
    } else {
        allValues.forEach(val => drawEquivalencyItem(container, val));
    }
}
function drawEquivalencyItem(parent, data) {
    const wrapper = document.createElement('div');
    wrapper.className = 'flex flex-col items-center gap-2';
    if (equivalencyToolState.showCircles) {
        const canvas = document.createElement('canvas');
        const size = 150;
        canvas.width = size; canvas.height = size;
        const ctx = canvas.getContext('2d');
        const radius = size / 2 - 10, centerX = size / 2, centerY = size / 2;
        
        ctx.beginPath(); ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.fillStyle = '#e5e7eb'; ctx.fill();
        if (data.numericValue !== null && !isNaN(data.numericValue)) {
            ctx.beginPath(); ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, radius, -Math.PI / 2, -Math.PI / 2 + (data.numericValue * 2 * Math.PI));
            ctx.closePath(); ctx.fillStyle = data.color; ctx.fill();
        }
        
        ctx.beginPath(); ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.strokeStyle = '#6b7280'; ctx.lineWidth = 3; ctx.stroke();
        wrapper.appendChild(canvas);
    }
    if (equivalencyToolState.showLabels) {
        const labelP = document.createElement('p');
        labelP.className = 'text-3xl md:text-4xl lg:text-5xl font-serif text-slate-700 text-center';
        
        let displayStr = data.originalStr || '...';
        if (data.type === 'Percent' && displayStr !== '...' && !displayStr.endsWith('%')) {
            displayStr += '%';
        }
        displayStr = displayStr.replace(/%/g, '\\%');
        if (data.type === 'Fraction' && displayStr.includes('/')) {
            const parts = displayStr.split('/');
            displayStr = `\\frac{${parts[0]}}{${parts[1]}}`;
        }
        labelP.innerHTML = `$$${displayStr}$$`;
        
        if(data.error) {
            labelP.classList.add('text-red-500');
            labelP.classList.remove('font-serif','text-3xl', 'md:text-4xl', 'lg:text-5xl');
            labelP.classList.add('text-lg');
            labelP.innerHTML = data.error;
        }
        wrapper.appendChild(labelP);
    }
    
    // Only append if it has content
    if (wrapper.children.length > 0) {
        parent.appendChild(wrapper);
    }
}
// Tool: Unit Rate Calculator
function setupUnitRateCalculator() {
    const addBtn = document.getElementById('add-unitrate-row');
    addManagedListener(addBtn, 'click', () => addUnitRateRow());
    addUnitRateRow('Car A', 300, 10, 'Gallons', 'Miles');
    addUnitRateRow('Car B', 400, 15, 'Gallons', 'Miles');
}
function addUnitRateRow(name = '', numValue = 0, denValue = 1, denUnit = 'items', numUnit = '$') {
    const container = document.getElementById('unitrate-rows-container');
    const rowDiv = document.createElement('div');
    rowDiv.className = 'flex flex-wrap items-center gap-x-4 gap-y-2 p-2 border rounded-lg bg-slate-50';
    rowDiv.innerHTML = `
        <input type="text" value="${name}" placeholder="Item Name" class="unitrate-name flex-grow p-1 border-2 rounded-lg">
        <div class="flex items-center gap-2">
            <input type="number" value="${numValue}" min="0" step="0.01" class="unitrate-numerator w-20 p-1 border-2 rounded-lg text-center">
            <input type="text" value="${numUnit}" placeholder="unit" class="unitrate-num-unit w-20 p-1 border-2 rounded-lg">
        </div>
        <div class="flex items-center gap-2">
             <label class="text-sm font-semibold">per</label>
            <input type="number" value="${denValue}" min="0.01" step="0.01" class="unitrate-denominator w-20 p-1 border-2 rounded-lg text-center">
            <input type="text" value="${denUnit}" placeholder="unit" class="unitrate-den-unit w-20 p-1 border-2 rounded-lg">
        </div>
        <button class="remove-unitrate-row font-bold text-red-500 ml-auto text-xl px-2">×</button>
    `;
    container.appendChild(rowDiv);
    rowDiv.querySelectorAll('input').forEach(el => addManagedListener(el, 'input', handleDraw));
    addManagedListener(rowDiv.querySelector('.remove-unitrate-row'), 'click', (e) => {
        e.target.closest('.flex-wrap').remove();
        handleDraw();
    });
    handleDraw();
}
function drawUnitRateCalculator() {
    const allValues = Array.from(document.querySelectorAll('#unitrate-rows-container > div')).map((row, index) => {
        const name = row.querySelector('.unitrate-name').value || `Item ${index + 1}`;
        const numerator = parseFloat(row.querySelector('.unitrate-numerator').value);
        const denominator = parseFloat(row.querySelector('.unitrate-denominator').value);
        const numUnit = row.querySelector('.unitrate-num-unit').value || 'unit';
        const denUnit = row.querySelector('.unitrate-den-unit').value || 'item';
        const unitRate = (!isNaN(numerator) && !isNaN(denominator) && denominator > 0) ? numerator / denominator : null;
        return { id: index, name, numerator, denominator, numUnit, denUnit, unitRate, color: barColors[index % barColors.length] };
    });
    
    drawUnitRateBars(allValues);
    calculateAndDisplayUnitRateResult(allValues);
}
function drawUnitRateBars(values) {
    interactiveDisplay.innerHTML = '';
    const validValues = values.filter(v => v.unitRate !== null);
    if (validValues.length === 0) {
        interactiveDisplay.innerHTML = `<p class="text-slate-500">Enter item details to see a comparison.</p>`;
        return;
    }
    
    const container = document.createElement('div');
    container.className = 'w-full flex flex-col gap-4 p-4';
    interactiveDisplay.appendChild(container);
    const maxUnitRate = Math.max(0.0001, ...validValues.map(v => v.unitRate));
    validValues.forEach(item => {
        const row = document.createElement('div');
        row.className = 'flex items-center gap-4 w-full';
        
        const label = document.createElement('div');
        label.className = 'w-1/4 text-right font-bold text-xl';
        label.textContent = item.name;
        
        const barContainer = document.createElement('div');
        barContainer.className = 'w-1/2 bg-gray-200 rounded-full h-10';
        const bar = document.createElement('div');
        const barWidth = (item.unitRate / maxUnitRate) * 100;
        bar.className = 'h-10 rounded-full';
        bar.style.width = `${barWidth}%`;
        bar.style.backgroundColor = item.color;
        barContainer.appendChild(bar);
        
        const rateText = document.createElement('div');
        rateText.className = 'w-1/4 font-bold text-xl text-left';
        rateText.textContent = item.unitRate.toFixed(2);
        row.appendChild(label);
        row.appendChild(barContainer);
        row.appendChild(rateText);
        container.appendChild(row);
    });
}
function calculateAndDisplayUnitRateResult(values) {
    interactiveResult.classList.remove('hidden');
    interactiveResultTitle.textContent = "Unit Rate Comparison";
    const validValues = values.filter(v => v.unitRate !== null);
    if (validValues.length === 0) {
        interactiveResultContent.innerHTML = `<p class="text-slate-400">Enter valid item details to see a comparison.</p>`;
        return;
    }
    
    const sorted = [...validValues].sort((a, b) => a.unitRate - b.unitRate);
    const best = sorted[0];
    
    let resultTex = '';
    if (best) {
         resultTex = `\\begin{align*} \\text{Best Rate:} &\\quad \\text{${best.name}} \\\\ & ${best.unitRate.toFixed(3)} \\, \\text{${best.numUnit}/${best.denUnit}} \\end{align*}`;
    }
    
    interactiveResultContent.innerHTML = `<div class="text-3xl md:text-4xl lg:text-5xl">$$${resultTex}$$</div>`;
}
// Tool: Integer Operations
function setupIntegerOperations() {
    integerOperationsState = { currentStep: 0, story: [] };
    const startInput = document.getElementById('integerStart');
    addManagedListener(startInput, 'input', () => {
        integerOperationsState.currentStep = 0;
        handleDraw();
    });
    const addBtn = document.getElementById('add-integer-op-row');
    const prevBtn = document.getElementById('integer-op-prev');
    const nextBtn = document.getElementById('integer-op-next');
    const resetBtn = document.getElementById('integer-op-reset');
    
    addManagedListener(addBtn, 'click', () => addIntegerOpRow());
    
    addManagedListener(nextBtn, 'click', () => {
        if (integerOperationsState.currentStep < integerOperationsState.story.length) {
            integerOperationsState.currentStep++;
            handleDraw();
        }
    });
    addManagedListener(prevBtn, 'click', () => {
        if (integerOperationsState.currentStep > 0) {
            integerOperationsState.currentStep--;
            handleDraw();
        }
    });
    
    addManagedListener(resetBtn, 'click', () => {
        integerOperationsState.currentStep = 0;
        handleDraw();
    });
    addIntegerOpRow('+', 5);
    addIntegerOpRow('-', 8);
}
function addIntegerOpRow(op = '+', value = 5) {
    const container = document.getElementById('integer-ops-container');
    const rowDiv = document.createElement('div');
    rowDiv.className = 'flex items-center gap-2 p-2 border rounded-lg bg-slate-50 transition-all';
    rowDiv.innerHTML = `
        <select class="integer-op-type bg-white p-1 rounded-md border border-slate-200">
            <option value="+">+</option>
            <option value="-">-</option>
            <option value="*">x</option>
            <option value="/">÷</option>
        </select>
        <input type="text" value="${value}" class="integer-op-value flex-grow p-1 border-2 rounded-lg text-center">
        <button class="remove-integer-op-row font-bold text-red-500 ml-auto text-xl px-2">×</button>
    `;
    container.appendChild(rowDiv);
    rowDiv.querySelector('.integer-op-type').value = op;
    
    const resetAndDraw = () => { integerOperationsState.currentStep = 0; handleDraw(); };
    addManagedListener(rowDiv.querySelector('.integer-op-type'), 'change', resetAndDraw);
    addManagedListener(rowDiv.querySelector('.integer-op-value'), 'input', resetAndDraw);
    
    addManagedListener(rowDiv.querySelector('.remove-integer-op-row'), 'click', (e) => {
        e.target.closest('div').remove();
        resetAndDraw();
    });
    handleDraw();
}
function drawIntegerOperations() {
    const startInput = document.getElementById('integerStart');
    if (!startInput) return;
    
    const startValue = parseInt(startInput.value);
    if (isNaN(startValue)) {
        interactiveDisplay.innerHTML = `<p class="text-red-500 p-4 text-xl">Invalid Start Value. Please enter a number.</p>`;
        interactiveResult.classList.add('hidden');
        return;
    } else {
         interactiveResult.classList.remove('hidden');
    }
    const opRows = document.querySelectorAll('#integer-ops-container > div');
    const story = [];
    let currentValue = startValue;
    let errorOccurred = false;
    opRows.forEach((row) => {
        if (errorOccurred) {
            story.push({ error: true, isFuture: true });
            return;
        }
        const op = row.querySelector('.integer-op-type').value;
        const valueStr = row.querySelector('.integer-op-value').value;
        const value = parseInt(valueStr);
        if (valueStr.trim() === '' || isNaN(value)) {
            story.push({ op, value: 'Invalid', startValue: currentValue, endValue: currentValue, error: true });
            errorOccurred = true;
            return;
        }
        const step = { op, value, startValue: currentValue, endValue: 0 };
        switch (op) {
            case '+': step.endValue = currentValue + value; break;
            case '-': step.endValue = currentValue - value; break;
            case '*': step.endValue = currentValue * value; break;
            case '/': step.endValue = (value !== 0) ? currentValue / value : currentValue; break;
        }
        step.endValue = Math.round(step.endValue * 100) / 100;
        story.push(step);
        currentValue = step.endValue;
    });
    integerOperationsState.story = story;
    opRows.forEach((row, index) => {
        row.classList.remove('border-blue-500', 'bg-blue-50', 'shadow-md', 'border-red-500', 'bg-red-50');
        const step = story[index];
         if (step && step.error) {
            row.classList.add('border-red-500', 'bg-red-50');
        } else if ((index + 1) === integerOperationsState.currentStep) {
            row.classList.add('border-blue-500', 'bg-blue-50', 'shadow-md');
        }
    });
    drawIntegerNumberLine();
    updateIntegerResults();
    const hasError = story.some(s => s.error);
    document.getElementById('integer-op-prev').disabled = integerOperationsState.currentStep === 0;
    document.getElementById('integer-op-next').disabled = integerOperationsState.currentStep >= story.length || hasError;
}
function drawIntegerNumberLine() {
    interactiveDisplay.innerHTML = '';
    const startNum = parseInt(document.getElementById('integerStart').value);
    if (isNaN(startNum)) return;
    
    const canvas = document.createElement('canvas');
    canvas.width = interactiveDisplay.clientWidth;
    canvas.height = interactiveDisplay.clientHeight > 150 ? interactiveDisplay.clientHeight : 250;
    interactiveDisplay.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    
    const { story, currentStep } = integerOperationsState;
    const validValues = story.filter(s => !s.error).flatMap(s => [s.startValue, s.endValue]);
    let min = startNum, max = startNum;
    [startNum, ...validValues].forEach(v => {
        if (v < min) min = v;
        if (v > max) max = v;
    });
    const range = max - min;
    const padding = 50;
    min -= Math.ceil(range * 0.1) + 2;
    max += Math.ceil(range * 0.1) + 2;
    
    const effectiveWidth = canvas.width - 2 * padding;
    const yAxis = canvas.height * 0.6;
    if(effectiveWidth <= 0) return;
    const scale = effectiveWidth / (max - min);
    const toX = num => padding + (num - min) * scale;
    ctx.beginPath();
    ctx.moveTo(0, yAxis); ctx.lineTo(canvas.width, yAxis);
    ctx.strokeStyle = '#334155'; ctx.lineWidth = 2; ctx.stroke();
    const tickInterval = Math.max(1, Math.round((max - min) / (effectiveWidth / 80)));
    for (let i = Math.floor(min / tickInterval) * tickInterval; i <= max; i = Math.round((i+tickInterval)*100)/100) {
        const x = toX(i);
        ctx.beginPath(); ctx.moveTo(x, yAxis - 5); ctx.lineTo(x, yAxis + 5);
        ctx.strokeStyle = '#64748b'; ctx.stroke();
        
        const label = document.createElement('div');
        label.className = 'absolute text-xl';
        label.style.left = `${x}px`;
        label.style.top = `${yAxis + 10}px`;
        label.style.transform = 'translateX(-50%)';
        label.innerHTML = `$$${i}$$`;
        interactiveDisplay.appendChild(label);
    }
    
    ctx.lineWidth = 2.5; ctx.font = 'bold 14px Montserrat';
    
    for (let i = 0; i < currentStep; i++) {
        const step = story[i];
        if (step.error) break;
        const x1 = toX(step.startValue);
        const x2 = toX(step.endValue);
        const midX = (x1 + x2) / 2;
        
        let arcHeight = Math.min(Math.abs(x2 - x1) * 0.3, yAxis - 40);
        const change = step.endValue - step.startValue;
        
        ctx.strokeStyle = change >= 0 ? '#16a34a' : '#dc2626';
        ctx.fillStyle = ctx.strokeStyle;
        ctx.beginPath(); ctx.moveTo(x1, yAxis);
        ctx.quadraticCurveTo(midX, yAxis - arcHeight, x2, yAxis);
        ctx.stroke();
        
        const arrowAngle = Math.atan2(yAxis - (yAxis-arcHeight), x2 - midX);
        ctx.beginPath();
        ctx.moveTo(x2, yAxis);
        ctx.lineTo(x2 - 10 * Math.cos(arrowAngle - Math.PI / 8), yAxis - 10 * Math.sin(arrowAngle - Math.PI / 8));
        ctx.moveTo(x2, yAxis);
        ctx.lineTo(x2 - 10 * Math.cos(arrowAngle + Math.PI / 8), yAxis - 10 * Math.sin(arrowAngle + Math.PI / 8));
        ctx.stroke();
        ctx.textAlign = 'center';
        let opSymbol = step.op;
        if (opSymbol === '*') opSymbol = '\\times';
        if (opSymbol === '/') opSymbol = '\\div';
        const labelText = `${opSymbol} ${step.value}`;
        ctx.fillText(labelText, midX, yAxis - arcHeight - 15);
    }
    const finalValue = (currentStep > 0 && !story[currentStep - 1].error) ? story[currentStep - 1].endValue : startNum;
    const finalX = toX(finalValue);
    ctx.beginPath(); ctx.arc(finalX, yAxis, 8, 0, 2 * Math.PI);
    ctx.fillStyle = '#0ea5e9'; ctx.fill();
    ctx.strokeStyle = 'white'; ctx.lineWidth = 2; ctx.stroke();
    ctx.fillStyle = '#0369a1'; ctx.font = 'bold 16px Montserrat';
    ctx.textAlign = 'center';
    ctx.fillText(finalValue, finalX, yAxis - 20);
}
function updateIntegerResults() {
    interactiveResultTitle.textContent = "Calculation Steps:";
    
    const { story, currentStep } = integerOperationsState;
    const startValue = parseInt(document.getElementById('integerStart').value);
    if(isNaN(startValue)) return;
    let mathjaxString = '\\begin{align*}';
    mathjaxString += `\\text{Start:} &\\quad ${startValue} \\\\`;
    let finalValue = startValue;
    story.forEach((step, index) => {
        if (index >= currentStep) return;
        if (step.error) {
            mathjaxString += `\\text{Step ${index + 1}:} &\\quad \\color{red}{\\text{Invalid Input}} \\\\`;
            finalValue = story[index - 1] ? story[index-1].endValue : startValue;
        } else {
            let opSymbol;
            switch (step.op) {
                case '*': opSymbol = '\\times'; break;
                case '/': opSymbol = '\\div'; break;
                default: opSymbol = step.op;
            }
            mathjaxString += `\\text{Step ${index + 1}:} &\\quad ${step.startValue} ${opSymbol} ${step.value} = ${step.endValue} \\\\`;
            finalValue = step.endValue;
        }
    });
    
    if (currentStep === 0) finalValue = startValue;
    mathjaxString += `\\hline \\mathbf{\\text{Result:}} &\\quad \\mathbf{${finalValue}}`;
    mathjaxString += '\\end{align*}';
    
    interactiveResultContent.innerHTML = `<div class="text-3xl md:text-4xl lg:text-5xl text-left">$$ ${mathjaxString} $$</div>`;
}
// Tool: Data Set Analyzer
function drawDataSetAnalyzer() {
    const inputStr = document.getElementById('dataSetInput').value;
    const calcType = document.querySelector('input[name="calcType"]:checked').value;
    
    const numbers = inputStr.split(',')
                           .map(s => s.trim())
                           .filter(s => s !== '')
                           .map(Number)
                           .filter(n => !isNaN(n));
    
    interactiveDisplay.innerHTML = `<p class="text-3xl md:text-4xl lg:text-5xl text-blue-700 font-bold p-4 text-center break-words">$$${numbers.join(',\\ ')}$$</p>`;
    
    interactiveResult.classList.remove('hidden');
    const result = calculateDataSetAnalytics(numbers, calcType);
    interactiveResultTitle.textContent = "Analysis Result:";
    interactiveResultContent.innerHTML = `
        <div id="data-analyzer-toggles" class="flex items-center justify-center gap-6 mb-4">
            <div class="flex items-center gap-2">
                <span class="text-sm font-semibold">Equation</span>
                <button id="equation-toggle-btn" class="toggle-btn ${dataSetAnalyzerState.showEquation ? 'toggle-on' : 'toggle-off'}">
                    <div class="toggle-dot ${dataSetAnalyzerState.showEquation ? 'dot-on' : ''}"></div>
                </button>
            </div>
            <div class="flex items-center gap-2">
                <span class="text-sm font-semibold">Graph</span>
                <button id="graph-toggle-btn" class="toggle-btn ${dataSetAnalyzerState.showGraph ? 'toggle-on' : 'toggle-off'}">
                    <div class="toggle-dot ${dataSetAnalyzerState.showGraph ? 'dot-on' : ''}"></div>
                </button>
            </div>
        </div>
        <div id="data-analyzer-equation-container" class="transition-all"></div>
        <div id="data-analyzer-graph-container" class="w-full mt-4 min-h-[250px] relative transition-all"></div>
    `;
    const eqContainer = document.getElementById('data-analyzer-equation-container');
    const graphContainer = document.getElementById('data-analyzer-graph-container');
    
    eqContainer.innerHTML = `<div class="text-3xl md:text-4xl lg:text-5xl">${result.html}</div>`;
    drawDataSetGraph(graphContainer, numbers, calcType);
    const eqToggleBtn = document.getElementById('equation-toggle-btn');
    const graphToggleBtn = document.getElementById('graph-toggle-btn');
    const updateVisibility = () => {
        eqContainer.style.display = dataSetAnalyzerState.showEquation ? '' : 'none';
        graphContainer.style.display = dataSetAnalyzerState.showGraph ? '' : 'none';
    };
    addManagedListener(eqToggleBtn, 'click', (e) => {
        const btn = e.currentTarget;
        dataSetAnalyzerState.showEquation = !dataSetAnalyzerState.showEquation;
        btn.classList.toggle('toggle-on', dataSetAnalyzerState.showEquation);
        btn.classList.toggle('toggle-off', !dataSetAnalyzerState.showEquation);
        btn.firstElementChild.classList.toggle('dot-on', dataSetAnalyzerState.showEquation);
        updateVisibility();
    });
    addManagedListener(graphToggleBtn, 'click', (e) => {
        const btn = e.currentTarget;
        dataSetAnalyzerState.showGraph = !dataSetAnalyzerState.showGraph;
        btn.classList.toggle('toggle-on', dataSetAnalyzerState.showGraph);
        btn.classList.toggle('toggle-off', !dataSetAnalyzerState.showGraph);
        btn.firstElementChild.classList.toggle('dot-on', dataSetAnalyzerState.showGraph);
        updateVisibility();
    });
    
    updateVisibility();
}
function calculateDataSetAnalytics(numbers, type) {
    if (numbers.length === 0) {
        return { html: '$$ \\text{Please enter data} $$' };
    }
    
    const round = (val) => Math.round(val * 1000) / 1000;
    
    switch(type) {
        case 'mean': {
            const sum = numbers.reduce((acc, val) => acc + val, 0);
            const mean = sum / numbers.length;
            return { html: `$$ \\text{Mean} = \\frac{${sum}}{${numbers.length}} = ${round(mean)} $$` };
        }
        case 'median': {
            const sorted = [...numbers].sort((a, b) => a - b);
            const mid = Math.floor(sorted.length / 2);
            const median = sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;
            return { html: `$$ \\text{Median} = ${round(median)} $$` };
        }
        case 'mode': {
            const freqMap = new Map();
            numbers.forEach(num => freqMap.set(num, (freqMap.get(num) || 0) + 1));
            let maxFreq = 0;
            for (const freq of freqMap.values()) {
                if (freq > maxFreq) maxFreq = freq;
            }
            if (maxFreq <= 1 && numbers.length > 1 && new Set(numbers).size === numbers.length) {
                return { html: '$$ \\text{No unique mode} $$' };
            }
            const modes = [];
            for (const [num, freq] of freqMap.entries()) {
                if (freq === maxFreq) modes.push(num);
            }
            return { html: `$$ \\text{Mode} = ${modes.sort((a,b) => a-b).join(', ')} $$` };
        }
        case 'range': {
            const min = Math.min(...numbers);
            const max = Math.max(...numbers);
            return { html: `$$ \\text{Range} = ${max} - ${min} = ${round(max - min)} $$` };
        }
        case 'mad': {
            const sum = numbers.reduce((acc, val) => acc + val, 0);
            const mean = sum / numbers.length;
            const absDeviations = numbers.map(num => Math.abs(num - mean));
            const madSum = absDeviations.reduce((acc, val) => acc + val, 0);
            const mad = madSum / numbers.length;
            return { html: `$$ \\text{MAD} \\approx ${round(mad)} $$` };
        }
        default: return { html: '$$ \\text{Invalid calculation} $$' };
    }
}
function drawDataSetGraph(container, numbers, calcType) {
    container.innerHTML = '';
    const canvas = document.createElement('canvas');
    container.appendChild(canvas);
    if (numbers.length === 0) {
        const ctx = canvas.getContext('2d');
        canvas.width = container.clientWidth;
        canvas.height = container.clientHeight;
        ctx.fillStyle = '#64748b';
        ctx.textAlign = 'center';
        ctx.font = '16px Montserrat';
        ctx.fillText('No data to display.', canvas.width / 2, canvas.height / 2);
        return;
    }
    
    let canvasHeight = 250;
    let madLineRowHeight = 0;
    if (calcType === 'mad') {
        madLineRowHeight = 15;
        const baseHeight = 200;
        canvasHeight = baseHeight + numbers.length * madLineRowHeight;
    }
    
    canvas.width = container.clientWidth;
    canvas.height = canvasHeight;
    const ctx = canvas.getContext('2d');
    
    const padding = { top: 20, right: 30, bottom: 60, left: 30 };
    const chartWidth = canvas.width - padding.left - padding.right;
    const yAxis = padding.top + 100;
    const min = Math.min(...numbers);
    const max = Math.max(...numbers);
    const range = max - min === 0 ? 10 : max - min;
    const viewMin = min - range * 0.1;
    const viewMax = max + range * 0.1;
    
    const toX = val => padding.left + ((val - viewMin) / (viewMax - viewMin)) * chartWidth;
    ctx.beginPath();
    ctx.moveTo(padding.left, yAxis);
    ctx.lineTo(padding.left + chartWidth, yAxis);
    ctx.strokeStyle = '#9ca3af';
    ctx.stroke();
    ctx.font = '14px Montserrat';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'top';
    ctx.fillStyle = '#4b5563';
    const tickCount = Math.min(8, Math.round(chartWidth / 100)); 
    if (tickCount > 0) {
        const tickValues = Array.from({length: tickCount + 1}, (_, i) => viewMin + i * (viewMax - viewMin) / tickCount);
        tickValues.forEach(val => {
            const x = toX(val);
            ctx.beginPath();
            ctx.moveTo(x, yAxis);
            ctx.lineTo(x, yAxis + 5);
            ctx.stroke();
            ctx.fillText(val.toFixed(1).replace('.0', ''), x, yAxis + 12);
        });
    }
    const dotRadius = 6;
    const plottedDots = [];
    const freqMapForPlotting = new Map();
    numbers.forEach(num => {
        const x = toX(num);
        const count = freqMapForPlotting.get(num) || 0;
        const y = yAxis - dotRadius - (count * dotRadius * 2.5);
        plottedDots.push({ x, y, value: num });
        ctx.beginPath();
        ctx.arc(x, y, dotRadius, 0, 2 * Math.PI);
        ctx.fillStyle = '#3b82f6';
        ctx.fill();
        ctx.strokeStyle = 'white';
        ctx.lineWidth = 1;
        ctx.stroke();
        freqMapForPlotting.set(num, count + 1);
    });
    const meanResult = calculateDataSetAnalytics(numbers, 'mean');
    const mean = parseFloat(meanResult.html.split('=')[1].trim().replace('$$',''));
    const meanX = toX(mean);
    if (calcType === 'mad') {
        const madLinesStartY = yAxis + 50;
        const madLinesEndY = madLinesStartY + (plottedDots.length - 1) * madLineRowHeight;
        
        ctx.strokeStyle = 'rgba(22, 163, 74, 0.5)';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(meanX, yAxis + 2);
        ctx.lineTo(meanX, madLinesEndY + 5);
        ctx.stroke();
        
        ctx.strokeStyle = 'rgba(220, 38, 38, 0.7)';
        ctx.lineWidth = 1.5;
        ctx.setLineDash([3, 4]);
        plottedDots.sort((a,b) => a.x - b.x).forEach((dot, i) => {
            const currentMadLineY = madLinesStartY + i * madLineRowHeight;
            ctx.beginPath();
            ctx.moveTo(dot.x, dot.y);
            ctx.lineTo(dot.x, currentMadLineY);
            ctx.lineTo(meanX, currentMadLineY);
            ctx.stroke();
        });
        ctx.setLineDash([]);
    }
    
    if (calcType === 'mean' || calcType === 'mad') {
        ctx.fillStyle = '#16a34a';
        ctx.beginPath();
        ctx.moveTo(meanX, yAxis + 2);
        ctx.lineTo(meanX - 8, yAxis + 12);
        ctx.lineTo(meanX + 8, yAxis + 12);
        ctx.closePath();
        ctx.fill();
    }
}
// --- MASTER CONTROL FUNCTIONS ---
function setupInputsForMode(mode) {
    cleanupEventListeners();
    resetDisplayAreas();
    standardLayout.classList.add('hidden');
    canvasLayout.classList.add('hidden');
    interactiveLayout.classList.add('hidden');
    
    dimensionInputsInline.innerHTML = '';
    canvasInputsPanel.innerHTML = '';
    
    standardLayout.classList.remove('flex-col', 'layout-side-by-side');
    standardLayout.classList.add('lg:flex-row');
    calculationStepsColumn.classList.remove('mt-4', 'lg:mt-0');
    let inputContainer = dimensionInputsInline;
    const isStandard = STANDARD_LAYOUT_TOOLS.includes(mode);
    const isCanvas = CANVAS_LAYOUT_TOOLS.includes(mode);
    const isInteractive = INTERACTIVE_LAYOUT_TOOLS.includes(mode);
    
    if (isStandard) {
        standardLayout.classList.remove('hidden');
        const stackedLayoutTools = ['numeralDisplay', 'wordProblemVisualizer', 'shapeClassifier', 'volumeOfSphere', 'surfaceAreaOfSphere'];
        if (stackedLayoutTools.includes(mode)) {
            standardLayout.classList.add('flex-col');
            standardLayout.classList.remove('lg:flex-row', 'layout-side-by-side');
            calculationStepsColumn.classList.add('mt-4', 'lg:mt-0');
        } else {
            standardLayout.classList.add('layout-side-by-side');
        }
    } else if (isCanvas) {
        canvasLayout.classList.remove('hidden');
        inputContainer = canvasInputsPanel;
    } else if (isInteractive) {
        interactiveLayout.classList.remove('hidden');
        interactiveLayout.appendChild(interactiveDisplay);
        interactiveLayout.appendChild(interactiveResult);
    }
    answerToggleContainer.classList.toggle('hidden', isCanvas || ['placeValue', 'tallyChart', 'equivalencyTool'].includes(mode));
    zoomControls.classList.toggle('hidden', true); // Always hide as tools using it are removed
    
    const answerIsOn = answerToggleBtn.classList.contains('toggle-on');
    if (isInteractive) {
        if(mode === 'equivalencyTool') {
            interactiveResult.classList.add('hidden');
        } else {
            const showResultByDefault = ['unitRateCalculator', 'dataSetAnalyzer', 'integerOperations'].includes(mode);
            interactiveResult.classList.toggle('hidden', !(showResultByDefault || answerIsOn));
        }
    } else if (isStandard) {
        calculationStepsColumn.style.display = answerIsOn ? 'flex' : 'none';
    }
    
    const menuIsOn = menuToggleBtn.classList.contains('toggle-on');
    if (isCanvas) {
        canvasInputsPanel.classList.toggle('panel-hidden', !menuIsOn);
        mainCanvas.parentElement.classList.toggle('canvas-expanded', !menuIsOn);
    } else {
        menuControls.classList.toggle('hidden', !menuIsOn);
    }
    if (inputContainer && inputTemplates[mode]) {
        inputContainer.innerHTML = inputTemplates[mode];
    } else if (inputContainer) {
        const toolName = modeSelector.options[modeSelector.selectedIndex].text;
        inputContainer.innerHTML = `<p class="text-sm text-slate-500">Controls for ${toolName} will be here.</p>`;
    }
    
    const standardInputListeners = () => {
         (inputContainer || dimensionInputsInline).querySelectorAll('input, select, button, textarea').forEach(el => {
            if (el.id?.startsWith('equivalency-') || el.id === 'undoBtn' || el.id === 'clearBtn' || el.id === 'shapeClassifierToggle') return;
             addManagedListener(el, 'input', handleDraw);
             addManagedListener(el, 'change', handleDraw);
        });
    };
    
    switch(mode) {
        case 'cardinality': setupCardinality(); standardInputListeners(); break;
        case 'verticalComparison': setupVerticalComparison(); standardInputListeners(); break;
        case 'numeralDisplay': standardInputListeners(); break;
        case 'wordProblemVisualizer': standardInputListeners(); break;
        case 'measurementComparator': setupMeasurementComparator(); break;
        case 'shapeClassifier': 
            setupShapeClassifier();
            standardInputListeners();
            break;
        case 'tallyChart': setupTallyChart(); break;
        case 'placeValue': standardInputListeners(); break;
        case 'equivalencyTool': 
            equivalencyToolState = { showLabels: true, showCircles: true };
            setupEquivalencyTool(); 
            break;
        case 'unitRateCalculator': setupUnitRateCalculator(); break;
        case 'integerOperations': setupIntegerOperations(); break;
        case 'dataSetAnalyzer':
            dataSetAnalyzerState = { showEquation: true, showGraph: true };
            addManagedListener(document.getElementById('dataSetInput'), 'input', handleDraw);
            document.getElementById('dataSetCalcTypeContainer').querySelectorAll('input').forEach(radio => addManagedListener(radio, 'change', handleDraw));
            break;
        default: standardInputListeners();
    }
    handleDraw();
}
function handleDraw() {
    const mode = currentMode;
    
    try {
        switch (mode) {
            case 'cardinality': drawCardinality(); break;
            case 'verticalComparison': drawVerticalComparison(); break;
            case 'numeralDisplay': drawNumeralDisplay(); break;
            case 'wordProblemVisualizer': drawWordProblemVisualizer(); break;
            case 'measurementComparator': drawMeasurementComparator(); break;
            case 'shapeClassifier': drawShapeClassifier(); break;
            case 'tallyChart': drawTallyChart(); break;
            case 'placeValue': drawPlaceValue(); break;
            case 'equivalencyTool': drawEquivalencyTool(); break;
            case 'unitRateCalculator': drawUnitRateCalculator(); break;
            case 'integerOperations': drawIntegerOperations(); break;
            case 'dataSetAnalyzer': drawDataSetAnalyzer(); break;
            case 'volumeOfSphere':
            case 'surfaceAreaOfSphere': {
                const r = parseFloat(document.getElementById('sphereRadius').value);
                const answerIsOn = answerToggleBtn.classList.contains('toggle-on');
                calculationStepsColumn.style.display = answerIsOn ? 'flex' : 'none';
                if (r > 0) {
                    draw3DShape('sphere', standardDisplayArea, { r });
                    const steps = mode === 'volumeOfSphere' ? calculateSphereVolumeSteps(r) : calculateSphereSurfaceAreaSteps(r);
                    const stepsTex = steps.join(' \\\\ ');
                    const mathjaxBlock = `\\begin{align*} ${stepsTex} \\end{align*}`;
                    stepsContentContainer.innerHTML = `<div class="text-3xl md:text-4xl lg:text-5xl">$$${mathjaxBlock}$$</div>`;
                } else {
                    htmlDisplay.classList.remove('hidden');
                    htmlDisplay.innerHTML = `<p class="text-red-500">Please enter a positive radius.</p>`;
                    stepsContentContainer.innerHTML = "Enter a positive radius to see the calculation.";
                }
                break;
            }
        }
    } catch (e) {
        showMessage(`An error occurred: ${e.message}`);
        console.error(e);
    }
    if (window.MathJax && window.MathJax.startup) {
        MathJax.startup.promise.then(() => {
            MathJax.typesetPromise([document.body]).catch(err => {});
        });
    }
}
// --- INITIALIZATION & EVENT LISTENERS ---
document.addEventListener('DOMContentLoaded', () => {
    modeSelector.addEventListener('change', () => {
        currentMode = modeSelector.value;
        setupInputsForMode(currentMode);
    });
    menuToggleBtn.addEventListener('click', () => {
        const isCanvas = CANVAS_LAYOUT_TOOLS.includes(currentMode);
        const isOn = menuToggleBtn.classList.toggle('toggle-on');
        menuToggleBtn.classList.toggle('toggle-off', !isOn);
        menuToggleDot.classList.toggle('dot-on', isOn);
        if (isCanvas) {
            canvasInputsPanel.classList.toggle('panel-hidden', !isOn);
            mainCanvas.parentElement.classList.toggle('canvas-expanded', !isOn);
            setTimeout(() => {
                const parent = mainCanvas.parentElement;
                if (parent) {
                    mainCanvas.width = parent.clientWidth;
                    mainCanvas.height = parent.clientHeight;
                }
                handleDraw();
            }, 300);
        } else {
            menuControls.classList.toggle('hidden', !isOn);
        }
    });
    answerToggleBtn.addEventListener('click', () => {
        const isOn = answerToggleBtn.classList.toggle('toggle-on');
        answerToggleBtn.classList.toggle('toggle-off', !isOn);
        answerToggleDot.classList.toggle('dot-on', isOn);
        
        handleDraw();
    });
    currentMode = modeSelector.value;
    setupInputsForMode(currentMode);
    
    let resizeTimer;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
            handleDraw();
        }, 150); 
    });
});
</script>
</body>
</html>